// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: google/ads/googleads/v19/services/audience_insights_service.proto

package services

import (
	common "github.com/revealbot/google-ads-go/common"
	enums "github.com/revealbot/google-ads-go/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [AudienceInsightsService.GenerateInsightsFinderReport][google.ads.googleads.v19.services.AudienceInsightsService.GenerateInsightsFinderReport].
type GenerateInsightsFinderReportRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. A baseline audience for this report, typically all people in a
	// region.
	BaselineAudience *BasicInsightsAudience `protobuf:"bytes,2,opt,name=baseline_audience,json=baselineAudience,proto3" json:"baseline_audience,omitempty"`
	// Required. The specific audience of interest for this report.  The insights
	// in the report will be based on attributes more prevalent in this audience
	// than in the report's baseline audience.
	SpecificAudience *BasicInsightsAudience `protobuf:"bytes,3,opt,name=specific_audience,json=specificAudience,proto3" json:"specific_audience,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,4,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GenerateInsightsFinderReportRequest) Reset() {
	*x = GenerateInsightsFinderReportRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateInsightsFinderReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInsightsFinderReportRequest) ProtoMessage() {}

func (x *GenerateInsightsFinderReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInsightsFinderReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateInsightsFinderReportRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateInsightsFinderReportRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateInsightsFinderReportRequest) GetBaselineAudience() *BasicInsightsAudience {
	if x != nil {
		return x.BaselineAudience
	}
	return nil
}

func (x *GenerateInsightsFinderReportRequest) GetSpecificAudience() *BasicInsightsAudience {
	if x != nil {
		return x.SpecificAudience
	}
	return nil
}

func (x *GenerateInsightsFinderReportRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// The response message for
// [AudienceInsightsService.GenerateInsightsFinderReport][google.ads.googleads.v19.services.AudienceInsightsService.GenerateInsightsFinderReport],
// containing the shareable URL for the report.
type GenerateInsightsFinderReportResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An HTTPS URL providing a deep link into the Insights Finder UI with the
	// report inputs filled in according to the request.
	SavedReportUrl string `protobuf:"bytes,1,opt,name=saved_report_url,json=savedReportUrl,proto3" json:"saved_report_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerateInsightsFinderReportResponse) Reset() {
	*x = GenerateInsightsFinderReportResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateInsightsFinderReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInsightsFinderReportResponse) ProtoMessage() {}

func (x *GenerateInsightsFinderReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInsightsFinderReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateInsightsFinderReportResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateInsightsFinderReportResponse) GetSavedReportUrl() string {
	if x != nil {
		return x.SavedReportUrl
	}
	return ""
}

// Request message for
// [AudienceInsightsService.GenerateAudienceCompositionInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceCompositionInsights].
type GenerateAudienceCompositionInsightsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. The audience of interest for which insights are being requested.
	Audience *InsightsAudience `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	// The baseline audience to which the audience of interest is being
	// compared.
	BaselineAudience *InsightsAudience `protobuf:"bytes,6,opt,name=baseline_audience,json=baselineAudience,proto3" json:"baseline_audience,omitempty"`
	// The one-month range of historical data to use for insights, in the format
	// "yyyy-mm". If unset, insights will be returned for the last thirty days of
	// data.
	DataMonth string `protobuf:"bytes,3,opt,name=data_month,json=dataMonth,proto3" json:"data_month,omitempty"`
	// Required. The audience dimensions for which composition insights should be
	// returned. Supported dimensions are KNOWLEDGE_GRAPH, GEO_TARGET_COUNTRY,
	// SUB_COUNTRY_LOCATION, YOUTUBE_CHANNEL, YOUTUBE_DYNAMIC_LINEUP,
	// AFFINITY_USER_INTEREST, IN_MARKET_USER_INTEREST, PARENTAL_STATUS,
	// INCOME_RANGE, AGE_RANGE, and GENDER.
	Dimensions []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,4,rep,packed,name=dimensions,proto3,enum=google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimensions,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,5,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GenerateAudienceCompositionInsightsRequest) Reset() {
	*x = GenerateAudienceCompositionInsightsRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAudienceCompositionInsightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAudienceCompositionInsightsRequest) ProtoMessage() {}

func (x *GenerateAudienceCompositionInsightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAudienceCompositionInsightsRequest.ProtoReflect.Descriptor instead.
func (*GenerateAudienceCompositionInsightsRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateAudienceCompositionInsightsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateAudienceCompositionInsightsRequest) GetAudience() *InsightsAudience {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *GenerateAudienceCompositionInsightsRequest) GetBaselineAudience() *InsightsAudience {
	if x != nil {
		return x.BaselineAudience
	}
	return nil
}

func (x *GenerateAudienceCompositionInsightsRequest) GetDataMonth() string {
	if x != nil {
		return x.DataMonth
	}
	return ""
}

func (x *GenerateAudienceCompositionInsightsRequest) GetDimensions() []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GenerateAudienceCompositionInsightsRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// Response message for
// [AudienceInsightsService.GenerateAudienceCompositionInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceCompositionInsights].
type GenerateAudienceCompositionInsightsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The contents of the insights report, organized into sections.
	// Each section is associated with one of the AudienceInsightsDimension values
	// in the request. There may be more than one section per dimension.
	Sections      []*AudienceCompositionSection `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateAudienceCompositionInsightsResponse) Reset() {
	*x = GenerateAudienceCompositionInsightsResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAudienceCompositionInsightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAudienceCompositionInsightsResponse) ProtoMessage() {}

func (x *GenerateAudienceCompositionInsightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAudienceCompositionInsightsResponse.ProtoReflect.Descriptor instead.
func (*GenerateAudienceCompositionInsightsResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateAudienceCompositionInsightsResponse) GetSections() []*AudienceCompositionSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

// Request message for
// [AudienceInsightsService.GenerateSuggestedTargetingInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateSuggestedTargetingInsights].
type GenerateSuggestedTargetingInsightsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Optional. The name of the customer being planned for.  This is a
	// user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,5,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	// Required. The audience to get suggestions for.
	//
	// Types that are valid to be assigned to AudienceInput:
	//
	//	*GenerateSuggestedTargetingInsightsRequest_AudienceDefinition
	//	*GenerateSuggestedTargetingInsightsRequest_AudienceDescription
	AudienceInput isGenerateSuggestedTargetingInsightsRequest_AudienceInput `protobuf_oneof:"audience_input"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateSuggestedTargetingInsightsRequest) Reset() {
	*x = GenerateSuggestedTargetingInsightsRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSuggestedTargetingInsightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSuggestedTargetingInsightsRequest) ProtoMessage() {}

func (x *GenerateSuggestedTargetingInsightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSuggestedTargetingInsightsRequest.ProtoReflect.Descriptor instead.
func (*GenerateSuggestedTargetingInsightsRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetAudienceInput() isGenerateSuggestedTargetingInsightsRequest_AudienceInput {
	if x != nil {
		return x.AudienceInput
	}
	return nil
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetAudienceDefinition() *InsightsAudienceDefinition {
	if x != nil {
		if x, ok := x.AudienceInput.(*GenerateSuggestedTargetingInsightsRequest_AudienceDefinition); ok {
			return x.AudienceDefinition
		}
	}
	return nil
}

func (x *GenerateSuggestedTargetingInsightsRequest) GetAudienceDescription() *InsightsAudienceDescription {
	if x != nil {
		if x, ok := x.AudienceInput.(*GenerateSuggestedTargetingInsightsRequest_AudienceDescription); ok {
			return x.AudienceDescription
		}
	}
	return nil
}

type isGenerateSuggestedTargetingInsightsRequest_AudienceInput interface {
	isGenerateSuggestedTargetingInsightsRequest_AudienceInput()
}

type GenerateSuggestedTargetingInsightsRequest_AudienceDefinition struct {
	// Provide a seed audience to get suggestions for.
	AudienceDefinition *InsightsAudienceDefinition `protobuf:"bytes,6,opt,name=audience_definition,json=audienceDefinition,proto3,oneof"`
}

type GenerateSuggestedTargetingInsightsRequest_AudienceDescription struct {
	// Provide a text description of an audience to get AI-generated targeting
	// suggestions. This can take around 5 or more seconds to complete.
	AudienceDescription *InsightsAudienceDescription `protobuf:"bytes,7,opt,name=audience_description,json=audienceDescription,proto3,oneof"`
}

func (*GenerateSuggestedTargetingInsightsRequest_AudienceDefinition) isGenerateSuggestedTargetingInsightsRequest_AudienceInput() {
}

func (*GenerateSuggestedTargetingInsightsRequest_AudienceDescription) isGenerateSuggestedTargetingInsightsRequest_AudienceInput() {
}

// Response message for
// [AudienceInsightsService.GenerateSuggestedTargetingInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateSuggestedTargetingInsights].
type GenerateSuggestedTargetingInsightsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Suggested insights for targetable audiences.
	Suggestions   []*TargetingSuggestionMetrics `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateSuggestedTargetingInsightsResponse) Reset() {
	*x = GenerateSuggestedTargetingInsightsResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSuggestedTargetingInsightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSuggestedTargetingInsightsResponse) ProtoMessage() {}

func (x *GenerateSuggestedTargetingInsightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSuggestedTargetingInsightsResponse.ProtoReflect.Descriptor instead.
func (*GenerateSuggestedTargetingInsightsResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateSuggestedTargetingInsightsResponse) GetSuggestions() []*TargetingSuggestionMetrics {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// A suggested targetable audience relevant to the requested audience.
type TargetingSuggestionMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Suggested location targeting.  These attributes all have dimension
	// GEO_TARGET_COUNTRY or SUB_COUNTRY_LOCATION
	Locations []*common.AudienceInsightsAttributeMetadata `protobuf:"bytes,9,rep,name=locations,proto3" json:"locations,omitempty"`
	// Suggested age targeting; may be empty indicating no age targeting.
	AgeRanges []*common.AgeRangeInfo `protobuf:"bytes,2,rep,name=age_ranges,json=ageRanges,proto3" json:"age_ranges,omitempty"`
	// Suggested gender targeting.  If present, this attribute has dimension
	// GENDER.
	Gender *common.GenderInfo `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// A Parental Status value (parent, or not a parent).
	ParentalStatus *common.ParentalStatusInfo `protobuf:"bytes,8,opt,name=parental_status,json=parentalStatus,proto3" json:"parental_status,omitempty"`
	// Suggested audience segments to target.  These attributes all have dimension
	// AFFINITY_USER_INTEREST or IN_MARKET_USER_INTEREST
	UserInterests []*common.AudienceInsightsAttributeMetadata `protobuf:"bytes,10,rep,name=user_interests,json=userInterests,proto3" json:"user_interests,omitempty"`
	// The fraction (from 0 to 1 inclusive) of the requested audience that can be
	// reached using the suggested targeting.
	Coverage float64 `protobuf:"fixed64,5,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// The ratio of coverage to the coverage of the baseline audience or zero if
	// this ratio is undefined or is not meaningful.
	Index float64 `protobuf:"fixed64,6,opt,name=index,proto3" json:"index,omitempty"`
	// The approximate estimated number of people that can be reached on YouTube
	// using this targeting.
	PotentialYoutubeReach int64 `protobuf:"varint,7,opt,name=potential_youtube_reach,json=potentialYoutubeReach,proto3" json:"potential_youtube_reach,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TargetingSuggestionMetrics) Reset() {
	*x = TargetingSuggestionMetrics{}
	mi := &file_services_audience_insights_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetingSuggestionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetingSuggestionMetrics) ProtoMessage() {}

func (x *TargetingSuggestionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetingSuggestionMetrics.ProtoReflect.Descriptor instead.
func (*TargetingSuggestionMetrics) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{6}
}

func (x *TargetingSuggestionMetrics) GetLocations() []*common.AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetAgeRanges() []*common.AgeRangeInfo {
	if x != nil {
		return x.AgeRanges
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetGender() *common.GenderInfo {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetParentalStatus() *common.ParentalStatusInfo {
	if x != nil {
		return x.ParentalStatus
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetUserInterests() []*common.AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.UserInterests
	}
	return nil
}

func (x *TargetingSuggestionMetrics) GetCoverage() float64 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *TargetingSuggestionMetrics) GetIndex() float64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TargetingSuggestionMetrics) GetPotentialYoutubeReach() int64 {
	if x != nil {
		return x.PotentialYoutubeReach
	}
	return 0
}

// Request message for
// [AudienceInsightsService.ListAudienceInsightsAttributes][google.ads.googleads.v19.services.AudienceInsightsService.ListAudienceInsightsAttributes].
type ListAudienceInsightsAttributesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. The types of attributes to be returned. Supported
	// dimensions are CATEGORY, KNOWLEDGE_GRAPH,
	// GEO_TARGET_COUNTRY, SUB_COUNTRY_LOCATION, YOUTUBE_DYNAMIC_LINEUP,
	// AFFINITY_USER_INTEREST, IN_MARKET_USER_INTEREST, PARENTAL_STATUS,
	// INCOME_RANGE, AGE_RANGE, and GENDER.
	Dimensions []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,2,rep,packed,name=dimensions,proto3,enum=google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimensions,omitempty"`
	// Required. A free text query.  If the requested dimensions include
	// Attributes CATEGORY or KNOWLEDGE_GRAPH, then the attributes returned for
	// those dimensions will match or be related to this string.  For other
	// dimensions, this field is ignored and all available attributes are
	// returned.
	QueryText string `protobuf:"bytes,3,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,4,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	// If SUB_COUNTRY_LOCATION attributes are one of the requested dimensions and
	// this field is present, then the SUB_COUNTRY_LOCATION attributes returned
	// will be located in these countries. If this field is absent, then location
	// attributes are not filtered by country. Setting this field when
	// SUB_COUNTRY_LOCATION attributes are not requested will return an error.
	LocationCountryFilters []*common.LocationInfo `protobuf:"bytes,5,rep,name=location_country_filters,json=locationCountryFilters,proto3" json:"location_country_filters,omitempty"`
	// If present, potential YouTube reach estimates within the specified market
	// will be returned for attributes for which they are available.  Reach is
	// only available for the AGE_RANGE, GENDER, AFFINITY_USER_INTEREST and
	// IN_MARKET_USER_INTEREST dimensions, and may not be available for every
	// attribute of those dimensions in every market.
	YoutubeReachLocation *common.LocationInfo `protobuf:"bytes,6,opt,name=youtube_reach_location,json=youtubeReachLocation,proto3" json:"youtube_reach_location,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ListAudienceInsightsAttributesRequest) Reset() {
	*x = ListAudienceInsightsAttributesRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAudienceInsightsAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudienceInsightsAttributesRequest) ProtoMessage() {}

func (x *ListAudienceInsightsAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudienceInsightsAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListAudienceInsightsAttributesRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListAudienceInsightsAttributesRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ListAudienceInsightsAttributesRequest) GetDimensions() []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ListAudienceInsightsAttributesRequest) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *ListAudienceInsightsAttributesRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

func (x *ListAudienceInsightsAttributesRequest) GetLocationCountryFilters() []*common.LocationInfo {
	if x != nil {
		return x.LocationCountryFilters
	}
	return nil
}

func (x *ListAudienceInsightsAttributesRequest) GetYoutubeReachLocation() *common.LocationInfo {
	if x != nil {
		return x.YoutubeReachLocation
	}
	return nil
}

// Response message for
// [AudienceInsightsService.ListAudienceInsightsAttributes][google.ads.googleads.v19.services.AudienceInsightsService.ListAudienceInsightsAttributes].
type ListAudienceInsightsAttributesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The attributes matching the search query.
	Attributes    []*common.AudienceInsightsAttributeMetadata `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAudienceInsightsAttributesResponse) Reset() {
	*x = ListAudienceInsightsAttributesResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAudienceInsightsAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudienceInsightsAttributesResponse) ProtoMessage() {}

func (x *ListAudienceInsightsAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudienceInsightsAttributesResponse.ProtoReflect.Descriptor instead.
func (*ListAudienceInsightsAttributesResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListAudienceInsightsAttributesResponse) GetAttributes() []*common.AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Request message for
// [AudienceInsightsService.ListInsightsEligibleDates][google.ads.googleads.v19.services.AudienceInsightsService.ListInsightsEligibleDates].
type ListInsightsEligibleDatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInsightsEligibleDatesRequest) Reset() {
	*x = ListInsightsEligibleDatesRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInsightsEligibleDatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInsightsEligibleDatesRequest) ProtoMessage() {}

func (x *ListInsightsEligibleDatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInsightsEligibleDatesRequest.ProtoReflect.Descriptor instead.
func (*ListInsightsEligibleDatesRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{9}
}

// Response message for
// [AudienceInsightsService.ListInsightsEligibleDates][google.ads.googleads.v19.services.AudienceInsightsService.ListInsightsEligibleDates].
type ListInsightsEligibleDatesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The months for which AudienceInsights data is currently
	// available, each represented as a string in the form "YYYY-MM".
	DataMonths []string `protobuf:"bytes,1,rep,name=data_months,json=dataMonths,proto3" json:"data_months,omitempty"`
	// The actual dates covered by the "last 30 days" date range that will be used
	// implicitly for
	// [AudienceInsightsService.GenerateAudienceCompositionInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceCompositionInsights]
	// requests that have no data_month set.
	LastThirtyDays *common.DateRange `protobuf:"bytes,2,opt,name=last_thirty_days,json=lastThirtyDays,proto3" json:"last_thirty_days,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListInsightsEligibleDatesResponse) Reset() {
	*x = ListInsightsEligibleDatesResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInsightsEligibleDatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInsightsEligibleDatesResponse) ProtoMessage() {}

func (x *ListInsightsEligibleDatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInsightsEligibleDatesResponse.ProtoReflect.Descriptor instead.
func (*ListInsightsEligibleDatesResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListInsightsEligibleDatesResponse) GetDataMonths() []string {
	if x != nil {
		return x.DataMonths
	}
	return nil
}

func (x *ListInsightsEligibleDatesResponse) GetLastThirtyDays() *common.DateRange {
	if x != nil {
		return x.LastThirtyDays
	}
	return nil
}

// Request message for
// [AudienceInsightsService.GenerateAudienceOverlapInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceOverlapInsights].
type GenerateAudienceOverlapInsightsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. The country in which to calculate the sizes and overlaps of
	// audiences.
	CountryLocation *common.LocationInfo `protobuf:"bytes,2,opt,name=country_location,json=countryLocation,proto3" json:"country_location,omitempty"`
	// Required. The audience attribute that should be intersected with all other
	// eligible audiences.  This must be an Affinity or In-Market UserInterest, an
	// AgeRange or a Gender.
	PrimaryAttribute *common.AudienceInsightsAttribute `protobuf:"bytes,6,opt,name=primary_attribute,json=primaryAttribute,proto3" json:"primary_attribute,omitempty"`
	// Required. The types of attributes of which to calculate the overlap with
	// the primary_attribute. The values must be a subset of
	// AFFINITY_USER_INTEREST, IN_MARKET_USER_INTEREST, AGE_RANGE and GENDER.
	Dimensions []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,4,rep,packed,name=dimensions,proto3,enum=google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimensions,omitempty"`
	// The name of the customer being planned for.  This is a user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,5,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GenerateAudienceOverlapInsightsRequest) Reset() {
	*x = GenerateAudienceOverlapInsightsRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAudienceOverlapInsightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAudienceOverlapInsightsRequest) ProtoMessage() {}

func (x *GenerateAudienceOverlapInsightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAudienceOverlapInsightsRequest.ProtoReflect.Descriptor instead.
func (*GenerateAudienceOverlapInsightsRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateAudienceOverlapInsightsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateAudienceOverlapInsightsRequest) GetCountryLocation() *common.LocationInfo {
	if x != nil {
		return x.CountryLocation
	}
	return nil
}

func (x *GenerateAudienceOverlapInsightsRequest) GetPrimaryAttribute() *common.AudienceInsightsAttribute {
	if x != nil {
		return x.PrimaryAttribute
	}
	return nil
}

func (x *GenerateAudienceOverlapInsightsRequest) GetDimensions() []enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GenerateAudienceOverlapInsightsRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// Response message for
// [AudienceInsightsService.GenerateAudienceOverlapInsights][google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceOverlapInsights].
type GenerateAudienceOverlapInsightsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the primary attribute, including potential YouTube reach.
	PrimaryAttributeMetadata *common.AudienceInsightsAttributeMetadata `protobuf:"bytes,3,opt,name=primary_attribute_metadata,json=primaryAttributeMetadata,proto3" json:"primary_attribute_metadata,omitempty"`
	// Lists of attributes and their overlap with the primary attribute, one list
	// per requested dimension.
	DimensionResults []*DimensionOverlapResult `protobuf:"bytes,2,rep,name=dimension_results,json=dimensionResults,proto3" json:"dimension_results,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GenerateAudienceOverlapInsightsResponse) Reset() {
	*x = GenerateAudienceOverlapInsightsResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAudienceOverlapInsightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAudienceOverlapInsightsResponse) ProtoMessage() {}

func (x *GenerateAudienceOverlapInsightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAudienceOverlapInsightsResponse.ProtoReflect.Descriptor instead.
func (*GenerateAudienceOverlapInsightsResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateAudienceOverlapInsightsResponse) GetPrimaryAttributeMetadata() *common.AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.PrimaryAttributeMetadata
	}
	return nil
}

func (x *GenerateAudienceOverlapInsightsResponse) GetDimensionResults() []*DimensionOverlapResult {
	if x != nil {
		return x.DimensionResults
	}
	return nil
}

// A list of audience attributes of a single dimension, including their overlap
// with a primary attribute, returned as part of a
// [GenerateAudienceOverlapInsightsResponse][google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsResponse].
type DimensionOverlapResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The dimension of all the attributes in this section.
	Dimension enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimension,omitempty"`
	// The attributes and their overlap with the primary attribute.
	Items         []*AudienceOverlapItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DimensionOverlapResult) Reset() {
	*x = DimensionOverlapResult{}
	mi := &file_services_audience_insights_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DimensionOverlapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionOverlapResult) ProtoMessage() {}

func (x *DimensionOverlapResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionOverlapResult.ProtoReflect.Descriptor instead.
func (*DimensionOverlapResult) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{13}
}

func (x *DimensionOverlapResult) GetDimension() enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimension
	}
	return enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension(0)
}

func (x *DimensionOverlapResult) GetItems() []*AudienceOverlapItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// An audience attribute, with metadata including the overlap between this
// attribute's potential YouTube reach and that of a primary attribute.
type AudienceOverlapItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The attribute and its metadata, including potential YouTube reach.
	AttributeMetadata *common.AudienceInsightsAttributeMetadata `protobuf:"bytes,3,opt,name=attribute_metadata,json=attributeMetadata,proto3" json:"attribute_metadata,omitempty"`
	// The estimated size of the intersection of this audience attribute with the
	// primary attribute, that is, the number of reachable YouTube users who match
	// BOTH the primary attribute and this one.
	PotentialYoutubeReachIntersection int64 `protobuf:"varint,2,opt,name=potential_youtube_reach_intersection,json=potentialYoutubeReachIntersection,proto3" json:"potential_youtube_reach_intersection,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *AudienceOverlapItem) Reset() {
	*x = AudienceOverlapItem{}
	mi := &file_services_audience_insights_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudienceOverlapItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceOverlapItem) ProtoMessage() {}

func (x *AudienceOverlapItem) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceOverlapItem.ProtoReflect.Descriptor instead.
func (*AudienceOverlapItem) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{14}
}

func (x *AudienceOverlapItem) GetAttributeMetadata() *common.AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.AttributeMetadata
	}
	return nil
}

func (x *AudienceOverlapItem) GetPotentialYoutubeReachIntersection() int64 {
	if x != nil {
		return x.PotentialYoutubeReachIntersection
	}
	return 0
}

// Request message for
// [AudienceInsightsService.GenerateTargetingSuggestionMetrics][google.ads.googleads.v19.services.AudienceInsightsService.GenerateTargetingSuggestionMetrics].
type GenerateTargetingSuggestionMetricsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ID of the customer.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. Audiences to request metrics for.
	Audiences []*BasicInsightsAudience `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// Optional. The name of the customer being planned for.  This is a
	// user-defined value.
	CustomerInsightsGroup string `protobuf:"bytes,3,opt,name=customer_insights_group,json=customerInsightsGroup,proto3" json:"customer_insights_group,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GenerateTargetingSuggestionMetricsRequest) Reset() {
	*x = GenerateTargetingSuggestionMetricsRequest{}
	mi := &file_services_audience_insights_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTargetingSuggestionMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTargetingSuggestionMetricsRequest) ProtoMessage() {}

func (x *GenerateTargetingSuggestionMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTargetingSuggestionMetricsRequest.ProtoReflect.Descriptor instead.
func (*GenerateTargetingSuggestionMetricsRequest) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateTargetingSuggestionMetricsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GenerateTargetingSuggestionMetricsRequest) GetAudiences() []*BasicInsightsAudience {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *GenerateTargetingSuggestionMetricsRequest) GetCustomerInsightsGroup() string {
	if x != nil {
		return x.CustomerInsightsGroup
	}
	return ""
}

// Response message for
// [AudienceInsightsService.GenerateTargetingSuggestionMetrics][google.ads.googleads.v19.services.AudienceInsightsService.GenerateTargetingSuggestionMetrics].
type GenerateTargetingSuggestionMetricsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Suggested targetable audiences. There will be one suggestion for each
	// [GenerateTargetingSuggestionMetricsRequest.audiences] requested, matching
	// the order requested.
	Suggestions   []*TargetingSuggestionMetrics `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateTargetingSuggestionMetricsResponse) Reset() {
	*x = GenerateTargetingSuggestionMetricsResponse{}
	mi := &file_services_audience_insights_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTargetingSuggestionMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTargetingSuggestionMetricsResponse) ProtoMessage() {}

func (x *GenerateTargetingSuggestionMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTargetingSuggestionMetricsResponse.ProtoReflect.Descriptor instead.
func (*GenerateTargetingSuggestionMetricsResponse) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{16}
}

func (x *GenerateTargetingSuggestionMetricsResponse) GetSuggestions() []*TargetingSuggestionMetrics {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// A description of an audience used for requesting insights.
type BasicInsightsAudience struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The countries for this audience.
	CountryLocation []*common.LocationInfo `protobuf:"bytes,1,rep,name=country_location,json=countryLocation,proto3" json:"country_location,omitempty"`
	// Sub-country geographic location attributes.  If present, each of these
	// must be contained in one of the countries in this audience.
	SubCountryLocations []*common.LocationInfo `protobuf:"bytes,2,rep,name=sub_country_locations,json=subCountryLocations,proto3" json:"sub_country_locations,omitempty"`
	// Gender for the audience.  If absent, the audience does not restrict by
	// gender.
	Gender *common.GenderInfo `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// Age ranges for the audience.  If absent, the audience represents all people
	// over 18 that match the other attributes.
	AgeRanges []*common.AgeRangeInfo `protobuf:"bytes,4,rep,name=age_ranges,json=ageRanges,proto3" json:"age_ranges,omitempty"`
	// User interests defining this audience.  Affinity and In-Market audiences
	// are supported.
	UserInterests []*common.UserInterestInfo `protobuf:"bytes,5,rep,name=user_interests,json=userInterests,proto3" json:"user_interests,omitempty"`
	// Topics, represented by Knowledge Graph entities and/or Product & Service
	// categories, that this audience is interested in.
	Topics        []*common.AudienceInsightsTopic `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicInsightsAudience) Reset() {
	*x = BasicInsightsAudience{}
	mi := &file_services_audience_insights_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicInsightsAudience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInsightsAudience) ProtoMessage() {}

func (x *BasicInsightsAudience) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInsightsAudience.ProtoReflect.Descriptor instead.
func (*BasicInsightsAudience) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{17}
}

func (x *BasicInsightsAudience) GetCountryLocation() []*common.LocationInfo {
	if x != nil {
		return x.CountryLocation
	}
	return nil
}

func (x *BasicInsightsAudience) GetSubCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.SubCountryLocations
	}
	return nil
}

func (x *BasicInsightsAudience) GetGender() *common.GenderInfo {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *BasicInsightsAudience) GetAgeRanges() []*common.AgeRangeInfo {
	if x != nil {
		return x.AgeRanges
	}
	return nil
}

func (x *BasicInsightsAudience) GetUserInterests() []*common.UserInterestInfo {
	if x != nil {
		return x.UserInterests
	}
	return nil
}

func (x *BasicInsightsAudience) GetTopics() []*common.AudienceInsightsTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

// A structured definition of the audience of interest for which insights are
// being requested in AudienceInsightsService.
type InsightsAudienceDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The audience of interest for which insights are being requested.
	Audience *InsightsAudience `protobuf:"bytes,1,opt,name=audience,proto3" json:"audience,omitempty"`
	// Optional. The baseline audience. The default, if unspecified, is all people
	// in the same country as the audience of interest.
	BaselineAudience *InsightsAudience `protobuf:"bytes,2,opt,name=baseline_audience,json=baselineAudience,proto3" json:"baseline_audience,omitempty"`
	// Optional. The one-month range of historical data to use for insights, in
	// the format "yyyy-mm". If unset, insights will be returned for the last
	// thirty days of data.
	DataMonth     string `protobuf:"bytes,3,opt,name=data_month,json=dataMonth,proto3" json:"data_month,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsightsAudienceDefinition) Reset() {
	*x = InsightsAudienceDefinition{}
	mi := &file_services_audience_insights_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsightsAudienceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsAudienceDefinition) ProtoMessage() {}

func (x *InsightsAudienceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsAudienceDefinition.ProtoReflect.Descriptor instead.
func (*InsightsAudienceDefinition) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{18}
}

func (x *InsightsAudienceDefinition) GetAudience() *InsightsAudience {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *InsightsAudienceDefinition) GetBaselineAudience() *InsightsAudience {
	if x != nil {
		return x.BaselineAudience
	}
	return nil
}

func (x *InsightsAudienceDefinition) GetDataMonth() string {
	if x != nil {
		return x.DataMonth
	}
	return ""
}

// A text description of the audience of interest for which insights are being
// requested in AudienceInsightsService.
type InsightsAudienceDescription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The countries for the audience.
	CountryLocations []*common.LocationInfo `protobuf:"bytes,1,rep,name=country_locations,json=countryLocations,proto3" json:"country_locations,omitempty"`
	// Required. An English language text description of an audience to get
	// suggestions for. Maximum length is 2000 characters. For example, "Women in
	// their 30s who love to travel".
	AudienceDescription string `protobuf:"bytes,2,opt,name=audience_description,json=audienceDescription,proto3" json:"audience_description,omitempty"`
	// Optional. An optional marketing objective which will influence the type of
	// suggestions produced. AWARENESS will provide affinity audience segments,
	// while CONSIDERATION will provide in-market audience segments. Leaving it
	// unset will provide both.
	MarketingObjective enums.AudienceInsightsMarketingObjectiveEnum_AudienceInsightsMarketingObjective `protobuf:"varint,3,opt,name=marketing_objective,json=marketingObjective,proto3,enum=google.ads.googleads.v19.enums.AudienceInsightsMarketingObjectiveEnum_AudienceInsightsMarketingObjective" json:"marketing_objective,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InsightsAudienceDescription) Reset() {
	*x = InsightsAudienceDescription{}
	mi := &file_services_audience_insights_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsightsAudienceDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsAudienceDescription) ProtoMessage() {}

func (x *InsightsAudienceDescription) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsAudienceDescription.ProtoReflect.Descriptor instead.
func (*InsightsAudienceDescription) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{19}
}

func (x *InsightsAudienceDescription) GetCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.CountryLocations
	}
	return nil
}

func (x *InsightsAudienceDescription) GetAudienceDescription() string {
	if x != nil {
		return x.AudienceDescription
	}
	return ""
}

func (x *InsightsAudienceDescription) GetMarketingObjective() enums.AudienceInsightsMarketingObjectiveEnum_AudienceInsightsMarketingObjective {
	if x != nil {
		return x.MarketingObjective
	}
	return enums.AudienceInsightsMarketingObjectiveEnum_AudienceInsightsMarketingObjective(0)
}

// A set of users, defined by various characteristics, for which insights can
// be requested in AudienceInsightsService.
type InsightsAudience struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The countries for the audience.
	CountryLocations []*common.LocationInfo `protobuf:"bytes,1,rep,name=country_locations,json=countryLocations,proto3" json:"country_locations,omitempty"`
	// Sub-country geographic location attributes.  If present, each of these
	// must be contained in one of the countries in this audience.  If absent, the
	// audience is geographically to the country_locations and no further.
	SubCountryLocations []*common.LocationInfo `protobuf:"bytes,2,rep,name=sub_country_locations,json=subCountryLocations,proto3" json:"sub_country_locations,omitempty"`
	// Gender for the audience.  If absent, the audience does not restrict by
	// gender.
	Gender *common.GenderInfo `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// Age ranges for the audience.  If absent, the audience represents all people
	// over 18 that match the other attributes.
	AgeRanges []*common.AgeRangeInfo `protobuf:"bytes,4,rep,name=age_ranges,json=ageRanges,proto3" json:"age_ranges,omitempty"`
	// Parental status for the audience.  If absent, the audience does not
	// restrict by parental status.
	ParentalStatus *common.ParentalStatusInfo `protobuf:"bytes,5,opt,name=parental_status,json=parentalStatus,proto3" json:"parental_status,omitempty"`
	// Household income percentile ranges for the audience.  If absent, the
	// audience does not restrict by household income range.
	IncomeRanges []*common.IncomeRangeInfo `protobuf:"bytes,6,rep,name=income_ranges,json=incomeRanges,proto3" json:"income_ranges,omitempty"`
	// Dynamic lineups representing the YouTube content viewed by the audience.
	DynamicLineups []*common.AudienceInsightsDynamicLineup `protobuf:"bytes,9,rep,name=dynamic_lineups,json=dynamicLineups,proto3" json:"dynamic_lineups,omitempty"`
	// A combination of entity, category and user interest attributes defining the
	// audience. The combination has a logical AND-of-ORs structure: Attributes
	// within each InsightsAudienceAttributeGroup are combined with OR, and
	// the combinations themselves are combined together with AND.  For example,
	// the expression (Entity OR Affinity) AND (In-Market OR Category) can be
	// formed using two InsightsAudienceAttributeGroups with two Attributes
	// each.
	TopicAudienceCombinations []*InsightsAudienceAttributeGroup `protobuf:"bytes,8,rep,name=topic_audience_combinations,json=topicAudienceCombinations,proto3" json:"topic_audience_combinations,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *InsightsAudience) Reset() {
	*x = InsightsAudience{}
	mi := &file_services_audience_insights_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsightsAudience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsAudience) ProtoMessage() {}

func (x *InsightsAudience) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsAudience.ProtoReflect.Descriptor instead.
func (*InsightsAudience) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{20}
}

func (x *InsightsAudience) GetCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.CountryLocations
	}
	return nil
}

func (x *InsightsAudience) GetSubCountryLocations() []*common.LocationInfo {
	if x != nil {
		return x.SubCountryLocations
	}
	return nil
}

func (x *InsightsAudience) GetGender() *common.GenderInfo {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *InsightsAudience) GetAgeRanges() []*common.AgeRangeInfo {
	if x != nil {
		return x.AgeRanges
	}
	return nil
}

func (x *InsightsAudience) GetParentalStatus() *common.ParentalStatusInfo {
	if x != nil {
		return x.ParentalStatus
	}
	return nil
}

func (x *InsightsAudience) GetIncomeRanges() []*common.IncomeRangeInfo {
	if x != nil {
		return x.IncomeRanges
	}
	return nil
}

func (x *InsightsAudience) GetDynamicLineups() []*common.AudienceInsightsDynamicLineup {
	if x != nil {
		return x.DynamicLineups
	}
	return nil
}

func (x *InsightsAudience) GetTopicAudienceCombinations() []*InsightsAudienceAttributeGroup {
	if x != nil {
		return x.TopicAudienceCombinations
	}
	return nil
}

// A list of AudienceInsightsAttributes.
type InsightsAudienceAttributeGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. A collection of audience attributes to be combined with logical
	// OR. Attributes need not all be the same dimension.  Only Knowledge Graph
	// entities, Product & Service Categories, and Affinity and In-Market
	// audiences are supported in this context.
	Attributes    []*common.AudienceInsightsAttribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsightsAudienceAttributeGroup) Reset() {
	*x = InsightsAudienceAttributeGroup{}
	mi := &file_services_audience_insights_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsightsAudienceAttributeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsAudienceAttributeGroup) ProtoMessage() {}

func (x *InsightsAudienceAttributeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsAudienceAttributeGroup.ProtoReflect.Descriptor instead.
func (*InsightsAudienceAttributeGroup) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{21}
}

func (x *InsightsAudienceAttributeGroup) GetAttributes() []*common.AudienceInsightsAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// A collection of related attributes of the same type in an audience
// composition insights report.
type AudienceCompositionSection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the attributes in this section.
	Dimension enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimension,omitempty"`
	// The most relevant segments for this audience.  If dimension is GENDER,
	// AGE_RANGE or PARENTAL_STATUS, then this list of attributes is exhaustive.
	TopAttributes []*AudienceCompositionAttribute `protobuf:"bytes,3,rep,name=top_attributes,json=topAttributes,proto3" json:"top_attributes,omitempty"`
	// Additional attributes for this audience, grouped into clusters.  Only
	// populated if dimension is YOUTUBE_CHANNEL.
	ClusteredAttributes []*AudienceCompositionAttributeCluster `protobuf:"bytes,4,rep,name=clustered_attributes,json=clusteredAttributes,proto3" json:"clustered_attributes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AudienceCompositionSection) Reset() {
	*x = AudienceCompositionSection{}
	mi := &file_services_audience_insights_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudienceCompositionSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionSection) ProtoMessage() {}

func (x *AudienceCompositionSection) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionSection.ProtoReflect.Descriptor instead.
func (*AudienceCompositionSection) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{22}
}

func (x *AudienceCompositionSection) GetDimension() enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimension
	}
	return enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension(0)
}

func (x *AudienceCompositionSection) GetTopAttributes() []*AudienceCompositionAttribute {
	if x != nil {
		return x.TopAttributes
	}
	return nil
}

func (x *AudienceCompositionSection) GetClusteredAttributes() []*AudienceCompositionAttributeCluster {
	if x != nil {
		return x.ClusteredAttributes
	}
	return nil
}

// A collection of related attributes, with metadata and metrics, in an audience
// composition insights report.
type AudienceCompositionAttributeCluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of this cluster of attributes
	ClusterDisplayName string `protobuf:"bytes,1,opt,name=cluster_display_name,json=clusterDisplayName,proto3" json:"cluster_display_name,omitempty"`
	// If the dimension associated with this cluster is YOUTUBE_CHANNEL, then
	// cluster_metrics are metrics associated with the cluster as a whole.
	// For other dimensions, this field is unset.
	ClusterMetrics *AudienceCompositionMetrics `protobuf:"bytes,3,opt,name=cluster_metrics,json=clusterMetrics,proto3" json:"cluster_metrics,omitempty"`
	// The individual attributes that make up this cluster, with metadata and
	// metrics.
	Attributes    []*AudienceCompositionAttribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudienceCompositionAttributeCluster) Reset() {
	*x = AudienceCompositionAttributeCluster{}
	mi := &file_services_audience_insights_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudienceCompositionAttributeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionAttributeCluster) ProtoMessage() {}

func (x *AudienceCompositionAttributeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionAttributeCluster.ProtoReflect.Descriptor instead.
func (*AudienceCompositionAttributeCluster) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{23}
}

func (x *AudienceCompositionAttributeCluster) GetClusterDisplayName() string {
	if x != nil {
		return x.ClusterDisplayName
	}
	return ""
}

func (x *AudienceCompositionAttributeCluster) GetClusterMetrics() *AudienceCompositionMetrics {
	if x != nil {
		return x.ClusterMetrics
	}
	return nil
}

func (x *AudienceCompositionAttributeCluster) GetAttributes() []*AudienceCompositionAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// The share and index metrics associated with an attribute in an audience
// composition insights report.
type AudienceCompositionMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The fraction (from 0 to 1 inclusive) of the baseline audience that match
	// the attribute.
	BaselineAudienceShare float64 `protobuf:"fixed64,1,opt,name=baseline_audience_share,json=baselineAudienceShare,proto3" json:"baseline_audience_share,omitempty"`
	// The fraction (from 0 to 1 inclusive) of the specific audience that match
	// the attribute.
	AudienceShare float64 `protobuf:"fixed64,2,opt,name=audience_share,json=audienceShare,proto3" json:"audience_share,omitempty"`
	// The ratio of audience_share to baseline_audience_share, or zero if this
	// ratio is undefined or is not meaningful.
	Index float64 `protobuf:"fixed64,3,opt,name=index,proto3" json:"index,omitempty"`
	// A relevance score from 0 to 1 inclusive.
	Score         float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudienceCompositionMetrics) Reset() {
	*x = AudienceCompositionMetrics{}
	mi := &file_services_audience_insights_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudienceCompositionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionMetrics) ProtoMessage() {}

func (x *AudienceCompositionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionMetrics.ProtoReflect.Descriptor instead.
func (*AudienceCompositionMetrics) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{24}
}

func (x *AudienceCompositionMetrics) GetBaselineAudienceShare() float64 {
	if x != nil {
		return x.BaselineAudienceShare
	}
	return 0
}

func (x *AudienceCompositionMetrics) GetAudienceShare() float64 {
	if x != nil {
		return x.AudienceShare
	}
	return 0
}

func (x *AudienceCompositionMetrics) GetIndex() float64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AudienceCompositionMetrics) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// An audience attribute with metadata and metrics.
type AudienceCompositionAttribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The attribute with its metadata.
	AttributeMetadata *common.AudienceInsightsAttributeMetadata `protobuf:"bytes,3,opt,name=attribute_metadata,json=attributeMetadata,proto3" json:"attribute_metadata,omitempty"`
	// Share and index metrics for the attribute.
	Metrics       *AudienceCompositionMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudienceCompositionAttribute) Reset() {
	*x = AudienceCompositionAttribute{}
	mi := &file_services_audience_insights_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudienceCompositionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceCompositionAttribute) ProtoMessage() {}

func (x *AudienceCompositionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_services_audience_insights_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceCompositionAttribute.ProtoReflect.Descriptor instead.
func (*AudienceCompositionAttribute) Descriptor() ([]byte, []int) {
	return file_services_audience_insights_service_proto_rawDescGZIP(), []int{25}
}

func (x *AudienceCompositionAttribute) GetAttributeMetadata() *common.AudienceInsightsAttributeMetadata {
	if x != nil {
		return x.AttributeMetadata
	}
	return nil
}

func (x *AudienceCompositionAttribute) GetMetrics() *AudienceCompositionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_services_audience_insights_service_proto protoreflect.FileDescriptor

var file_services_audience_insights_service_proto_rawDesc = string([]byte{
	0x0a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x39, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a,
	0x23, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x62, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x50, 0x0a, 0x24, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xdf, 0x03, 0x0a,
	0x2a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x7c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x88,
	0x01, 0x0a, 0x2b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x29, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x70, 0x0a, 0x13, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x14,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x04, 0x0a, 0x1a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x60, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x59, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x22, 0xf5, 0x03, 0x0a, 0x25, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x0a, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x57,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x67, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a,
	0x16, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x22, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x54, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x69, 0x72, 0x74, 0x79, 0x44, 0x61,
	0x79, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x7c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x94, 0x02, 0x0a, 0x27, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x18, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x11, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xdd, 0x01,
	0x0a, 0x16, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x75, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd9, 0x01,
	0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x71, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x24, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x29, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5b, 0x0a,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x04, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x61, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0xfd, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x22, 0xd8, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x8b, 0x06, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x61, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x13, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x19,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5f, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xf6, 0x02,
	0x0a, 0x1a, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x09,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0d, 0x74, 0x6f,
	0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x14, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x23, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x66, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x32, 0xd0, 0x10, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa9, 0x02, 0x0a,
	0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0xda, 0x41, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x2c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x76, 0x31,
	0x39, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xa5, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6e, 0xda, 0x41, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x2c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22,
	0x3f, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xe2, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0xb5, 0x02, 0x0a, 0x23, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x4d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0xda, 0x41,
	0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x76, 0x31, 0x39, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x8f, 0x02,
	0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f, 0x76,
	0x31, 0x39, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0xc0, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0xda, 0x41, 0x39,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2c, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a,
	0x01, 0x2a, 0x22, 0x3e, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0xa7, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0xda, 0x41, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f, 0x76, 0x31, 0x39, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x45, 0xca, 0x41,
	0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x64, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x42, 0x88, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x1c, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02,
	0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0xca, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x39, 0x5c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xea, 0x02, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x39, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_services_audience_insights_service_proto_rawDescOnce sync.Once
	file_services_audience_insights_service_proto_rawDescData []byte
)

func file_services_audience_insights_service_proto_rawDescGZIP() []byte {
	file_services_audience_insights_service_proto_rawDescOnce.Do(func() {
		file_services_audience_insights_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_audience_insights_service_proto_rawDesc), len(file_services_audience_insights_service_proto_rawDesc)))
	})
	return file_services_audience_insights_service_proto_rawDescData
}

var file_services_audience_insights_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_services_audience_insights_service_proto_goTypes = []any{
	(*GenerateInsightsFinderReportRequest)(nil),                                          // 0: google.ads.googleads.v19.services.GenerateInsightsFinderReportRequest
	(*GenerateInsightsFinderReportResponse)(nil),                                         // 1: google.ads.googleads.v19.services.GenerateInsightsFinderReportResponse
	(*GenerateAudienceCompositionInsightsRequest)(nil),                                   // 2: google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsRequest
	(*GenerateAudienceCompositionInsightsResponse)(nil),                                  // 3: google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsResponse
	(*GenerateSuggestedTargetingInsightsRequest)(nil),                                    // 4: google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsRequest
	(*GenerateSuggestedTargetingInsightsResponse)(nil),                                   // 5: google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsResponse
	(*TargetingSuggestionMetrics)(nil),                                                   // 6: google.ads.googleads.v19.services.TargetingSuggestionMetrics
	(*ListAudienceInsightsAttributesRequest)(nil),                                        // 7: google.ads.googleads.v19.services.ListAudienceInsightsAttributesRequest
	(*ListAudienceInsightsAttributesResponse)(nil),                                       // 8: google.ads.googleads.v19.services.ListAudienceInsightsAttributesResponse
	(*ListInsightsEligibleDatesRequest)(nil),                                             // 9: google.ads.googleads.v19.services.ListInsightsEligibleDatesRequest
	(*ListInsightsEligibleDatesResponse)(nil),                                            // 10: google.ads.googleads.v19.services.ListInsightsEligibleDatesResponse
	(*GenerateAudienceOverlapInsightsRequest)(nil),                                       // 11: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsRequest
	(*GenerateAudienceOverlapInsightsResponse)(nil),                                      // 12: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsResponse
	(*DimensionOverlapResult)(nil),                                                       // 13: google.ads.googleads.v19.services.DimensionOverlapResult
	(*AudienceOverlapItem)(nil),                                                          // 14: google.ads.googleads.v19.services.AudienceOverlapItem
	(*GenerateTargetingSuggestionMetricsRequest)(nil),                                    // 15: google.ads.googleads.v19.services.GenerateTargetingSuggestionMetricsRequest
	(*GenerateTargetingSuggestionMetricsResponse)(nil),                                   // 16: google.ads.googleads.v19.services.GenerateTargetingSuggestionMetricsResponse
	(*BasicInsightsAudience)(nil),                                                        // 17: google.ads.googleads.v19.services.BasicInsightsAudience
	(*InsightsAudienceDefinition)(nil),                                                   // 18: google.ads.googleads.v19.services.InsightsAudienceDefinition
	(*InsightsAudienceDescription)(nil),                                                  // 19: google.ads.googleads.v19.services.InsightsAudienceDescription
	(*InsightsAudience)(nil),                                                             // 20: google.ads.googleads.v19.services.InsightsAudience
	(*InsightsAudienceAttributeGroup)(nil),                                               // 21: google.ads.googleads.v19.services.InsightsAudienceAttributeGroup
	(*AudienceCompositionSection)(nil),                                                   // 22: google.ads.googleads.v19.services.AudienceCompositionSection
	(*AudienceCompositionAttributeCluster)(nil),                                          // 23: google.ads.googleads.v19.services.AudienceCompositionAttributeCluster
	(*AudienceCompositionMetrics)(nil),                                                   // 24: google.ads.googleads.v19.services.AudienceCompositionMetrics
	(*AudienceCompositionAttribute)(nil),                                                 // 25: google.ads.googleads.v19.services.AudienceCompositionAttribute
	(enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension)(0),                   // 26: google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	(*common.AudienceInsightsAttributeMetadata)(nil),                                     // 27: google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	(*common.AgeRangeInfo)(nil),                                                          // 28: google.ads.googleads.v19.common.AgeRangeInfo
	(*common.GenderInfo)(nil),                                                            // 29: google.ads.googleads.v19.common.GenderInfo
	(*common.ParentalStatusInfo)(nil),                                                    // 30: google.ads.googleads.v19.common.ParentalStatusInfo
	(*common.LocationInfo)(nil),                                                          // 31: google.ads.googleads.v19.common.LocationInfo
	(*common.DateRange)(nil),                                                             // 32: google.ads.googleads.v19.common.DateRange
	(*common.AudienceInsightsAttribute)(nil),                                             // 33: google.ads.googleads.v19.common.AudienceInsightsAttribute
	(*common.UserInterestInfo)(nil),                                                      // 34: google.ads.googleads.v19.common.UserInterestInfo
	(*common.AudienceInsightsTopic)(nil),                                                 // 35: google.ads.googleads.v19.common.AudienceInsightsTopic
	(enums.AudienceInsightsMarketingObjectiveEnum_AudienceInsightsMarketingObjective)(0), // 36: google.ads.googleads.v19.enums.AudienceInsightsMarketingObjectiveEnum.AudienceInsightsMarketingObjective
	(*common.IncomeRangeInfo)(nil),                                                       // 37: google.ads.googleads.v19.common.IncomeRangeInfo
	(*common.AudienceInsightsDynamicLineup)(nil),                                         // 38: google.ads.googleads.v19.common.AudienceInsightsDynamicLineup
}
var file_services_audience_insights_service_proto_depIdxs = []int32{
	17, // 0: google.ads.googleads.v19.services.GenerateInsightsFinderReportRequest.baseline_audience:type_name -> google.ads.googleads.v19.services.BasicInsightsAudience
	17, // 1: google.ads.googleads.v19.services.GenerateInsightsFinderReportRequest.specific_audience:type_name -> google.ads.googleads.v19.services.BasicInsightsAudience
	20, // 2: google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsRequest.audience:type_name -> google.ads.googleads.v19.services.InsightsAudience
	20, // 3: google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsRequest.baseline_audience:type_name -> google.ads.googleads.v19.services.InsightsAudience
	26, // 4: google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsRequest.dimensions:type_name -> google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	22, // 5: google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsResponse.sections:type_name -> google.ads.googleads.v19.services.AudienceCompositionSection
	18, // 6: google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsRequest.audience_definition:type_name -> google.ads.googleads.v19.services.InsightsAudienceDefinition
	19, // 7: google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsRequest.audience_description:type_name -> google.ads.googleads.v19.services.InsightsAudienceDescription
	6,  // 8: google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsResponse.suggestions:type_name -> google.ads.googleads.v19.services.TargetingSuggestionMetrics
	27, // 9: google.ads.googleads.v19.services.TargetingSuggestionMetrics.locations:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	28, // 10: google.ads.googleads.v19.services.TargetingSuggestionMetrics.age_ranges:type_name -> google.ads.googleads.v19.common.AgeRangeInfo
	29, // 11: google.ads.googleads.v19.services.TargetingSuggestionMetrics.gender:type_name -> google.ads.googleads.v19.common.GenderInfo
	30, // 12: google.ads.googleads.v19.services.TargetingSuggestionMetrics.parental_status:type_name -> google.ads.googleads.v19.common.ParentalStatusInfo
	27, // 13: google.ads.googleads.v19.services.TargetingSuggestionMetrics.user_interests:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	26, // 14: google.ads.googleads.v19.services.ListAudienceInsightsAttributesRequest.dimensions:type_name -> google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	31, // 15: google.ads.googleads.v19.services.ListAudienceInsightsAttributesRequest.location_country_filters:type_name -> google.ads.googleads.v19.common.LocationInfo
	31, // 16: google.ads.googleads.v19.services.ListAudienceInsightsAttributesRequest.youtube_reach_location:type_name -> google.ads.googleads.v19.common.LocationInfo
	27, // 17: google.ads.googleads.v19.services.ListAudienceInsightsAttributesResponse.attributes:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	32, // 18: google.ads.googleads.v19.services.ListInsightsEligibleDatesResponse.last_thirty_days:type_name -> google.ads.googleads.v19.common.DateRange
	31, // 19: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsRequest.country_location:type_name -> google.ads.googleads.v19.common.LocationInfo
	33, // 20: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsRequest.primary_attribute:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttribute
	26, // 21: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsRequest.dimensions:type_name -> google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	27, // 22: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsResponse.primary_attribute_metadata:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	13, // 23: google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsResponse.dimension_results:type_name -> google.ads.googleads.v19.services.DimensionOverlapResult
	26, // 24: google.ads.googleads.v19.services.DimensionOverlapResult.dimension:type_name -> google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	14, // 25: google.ads.googleads.v19.services.DimensionOverlapResult.items:type_name -> google.ads.googleads.v19.services.AudienceOverlapItem
	27, // 26: google.ads.googleads.v19.services.AudienceOverlapItem.attribute_metadata:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	17, // 27: google.ads.googleads.v19.services.GenerateTargetingSuggestionMetricsRequest.audiences:type_name -> google.ads.googleads.v19.services.BasicInsightsAudience
	6,  // 28: google.ads.googleads.v19.services.GenerateTargetingSuggestionMetricsResponse.suggestions:type_name -> google.ads.googleads.v19.services.TargetingSuggestionMetrics
	31, // 29: google.ads.googleads.v19.services.BasicInsightsAudience.country_location:type_name -> google.ads.googleads.v19.common.LocationInfo
	31, // 30: google.ads.googleads.v19.services.BasicInsightsAudience.sub_country_locations:type_name -> google.ads.googleads.v19.common.LocationInfo
	29, // 31: google.ads.googleads.v19.services.BasicInsightsAudience.gender:type_name -> google.ads.googleads.v19.common.GenderInfo
	28, // 32: google.ads.googleads.v19.services.BasicInsightsAudience.age_ranges:type_name -> google.ads.googleads.v19.common.AgeRangeInfo
	34, // 33: google.ads.googleads.v19.services.BasicInsightsAudience.user_interests:type_name -> google.ads.googleads.v19.common.UserInterestInfo
	35, // 34: google.ads.googleads.v19.services.BasicInsightsAudience.topics:type_name -> google.ads.googleads.v19.common.AudienceInsightsTopic
	20, // 35: google.ads.googleads.v19.services.InsightsAudienceDefinition.audience:type_name -> google.ads.googleads.v19.services.InsightsAudience
	20, // 36: google.ads.googleads.v19.services.InsightsAudienceDefinition.baseline_audience:type_name -> google.ads.googleads.v19.services.InsightsAudience
	31, // 37: google.ads.googleads.v19.services.InsightsAudienceDescription.country_locations:type_name -> google.ads.googleads.v19.common.LocationInfo
	36, // 38: google.ads.googleads.v19.services.InsightsAudienceDescription.marketing_objective:type_name -> google.ads.googleads.v19.enums.AudienceInsightsMarketingObjectiveEnum.AudienceInsightsMarketingObjective
	31, // 39: google.ads.googleads.v19.services.InsightsAudience.country_locations:type_name -> google.ads.googleads.v19.common.LocationInfo
	31, // 40: google.ads.googleads.v19.services.InsightsAudience.sub_country_locations:type_name -> google.ads.googleads.v19.common.LocationInfo
	29, // 41: google.ads.googleads.v19.services.InsightsAudience.gender:type_name -> google.ads.googleads.v19.common.GenderInfo
	28, // 42: google.ads.googleads.v19.services.InsightsAudience.age_ranges:type_name -> google.ads.googleads.v19.common.AgeRangeInfo
	30, // 43: google.ads.googleads.v19.services.InsightsAudience.parental_status:type_name -> google.ads.googleads.v19.common.ParentalStatusInfo
	37, // 44: google.ads.googleads.v19.services.InsightsAudience.income_ranges:type_name -> google.ads.googleads.v19.common.IncomeRangeInfo
	38, // 45: google.ads.googleads.v19.services.InsightsAudience.dynamic_lineups:type_name -> google.ads.googleads.v19.common.AudienceInsightsDynamicLineup
	21, // 46: google.ads.googleads.v19.services.InsightsAudience.topic_audience_combinations:type_name -> google.ads.googleads.v19.services.InsightsAudienceAttributeGroup
	33, // 47: google.ads.googleads.v19.services.InsightsAudienceAttributeGroup.attributes:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttribute
	26, // 48: google.ads.googleads.v19.services.AudienceCompositionSection.dimension:type_name -> google.ads.googleads.v19.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	25, // 49: google.ads.googleads.v19.services.AudienceCompositionSection.top_attributes:type_name -> google.ads.googleads.v19.services.AudienceCompositionAttribute
	23, // 50: google.ads.googleads.v19.services.AudienceCompositionSection.clustered_attributes:type_name -> google.ads.googleads.v19.services.AudienceCompositionAttributeCluster
	24, // 51: google.ads.googleads.v19.services.AudienceCompositionAttributeCluster.cluster_metrics:type_name -> google.ads.googleads.v19.services.AudienceCompositionMetrics
	25, // 52: google.ads.googleads.v19.services.AudienceCompositionAttributeCluster.attributes:type_name -> google.ads.googleads.v19.services.AudienceCompositionAttribute
	27, // 53: google.ads.googleads.v19.services.AudienceCompositionAttribute.attribute_metadata:type_name -> google.ads.googleads.v19.common.AudienceInsightsAttributeMetadata
	24, // 54: google.ads.googleads.v19.services.AudienceCompositionAttribute.metrics:type_name -> google.ads.googleads.v19.services.AudienceCompositionMetrics
	0,  // 55: google.ads.googleads.v19.services.AudienceInsightsService.GenerateInsightsFinderReport:input_type -> google.ads.googleads.v19.services.GenerateInsightsFinderReportRequest
	7,  // 56: google.ads.googleads.v19.services.AudienceInsightsService.ListAudienceInsightsAttributes:input_type -> google.ads.googleads.v19.services.ListAudienceInsightsAttributesRequest
	9,  // 57: google.ads.googleads.v19.services.AudienceInsightsService.ListInsightsEligibleDates:input_type -> google.ads.googleads.v19.services.ListInsightsEligibleDatesRequest
	2,  // 58: google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceCompositionInsights:input_type -> google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsRequest
	4,  // 59: google.ads.googleads.v19.services.AudienceInsightsService.GenerateSuggestedTargetingInsights:input_type -> google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsRequest
	11, // 60: google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceOverlapInsights:input_type -> google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsRequest
	15, // 61: google.ads.googleads.v19.services.AudienceInsightsService.GenerateTargetingSuggestionMetrics:input_type -> google.ads.googleads.v19.services.GenerateTargetingSuggestionMetricsRequest
	1,  // 62: google.ads.googleads.v19.services.AudienceInsightsService.GenerateInsightsFinderReport:output_type -> google.ads.googleads.v19.services.GenerateInsightsFinderReportResponse
	8,  // 63: google.ads.googleads.v19.services.AudienceInsightsService.ListAudienceInsightsAttributes:output_type -> google.ads.googleads.v19.services.ListAudienceInsightsAttributesResponse
	10, // 64: google.ads.googleads.v19.services.AudienceInsightsService.ListInsightsEligibleDates:output_type -> google.ads.googleads.v19.services.ListInsightsEligibleDatesResponse
	3,  // 65: google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceCompositionInsights:output_type -> google.ads.googleads.v19.services.GenerateAudienceCompositionInsightsResponse
	5,  // 66: google.ads.googleads.v19.services.AudienceInsightsService.GenerateSuggestedTargetingInsights:output_type -> google.ads.googleads.v19.services.GenerateSuggestedTargetingInsightsResponse
	12, // 67: google.ads.googleads.v19.services.AudienceInsightsService.GenerateAudienceOverlapInsights:output_type -> google.ads.googleads.v19.services.GenerateAudienceOverlapInsightsResponse
	16, // 68: google.ads.googleads.v19.services.AudienceInsightsService.GenerateTargetingSuggestionMetrics:output_type -> google.ads.googleads.v19.services.GenerateTargetingSuggestionMetricsResponse
	62, // [62:69] is the sub-list for method output_type
	55, // [55:62] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_services_audience_insights_service_proto_init() }
func file_services_audience_insights_service_proto_init() {
	if File_services_audience_insights_service_proto != nil {
		return
	}
	file_services_audience_insights_service_proto_msgTypes[4].OneofWrappers = []any{
		(*GenerateSuggestedTargetingInsightsRequest_AudienceDefinition)(nil),
		(*GenerateSuggestedTargetingInsightsRequest_AudienceDescription)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_audience_insights_service_proto_rawDesc), len(file_services_audience_insights_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_audience_insights_service_proto_goTypes,
		DependencyIndexes: file_services_audience_insights_service_proto_depIdxs,
		MessageInfos:      file_services_audience_insights_service_proto_msgTypes,
	}.Build()
	File_services_audience_insights_service_proto = out.File
	file_services_audience_insights_service_proto_goTypes = nil
	file_services_audience_insights_service_proto_depIdxs = nil
}
