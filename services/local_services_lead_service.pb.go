// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: google/ads/googleads/v19/services/local_services_lead_service.proto

package services

import (
	enums "github.com/revealbot/google-ads-go/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [LocalServicesLeadService.AppendLeadConversation][google.ads.googleads.v19.services.LocalServicesLeadService.AppendLeadConversation].
type AppendLeadConversationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The Id of the customer which owns the leads onto which the
	// conversations will be appended.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. Conversations that are being appended.
	Conversations []*Conversation `protobuf:"bytes,2,rep,name=conversations,proto3" json:"conversations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendLeadConversationRequest) Reset() {
	*x = AppendLeadConversationRequest{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendLeadConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendLeadConversationRequest) ProtoMessage() {}

func (x *AppendLeadConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendLeadConversationRequest.ProtoReflect.Descriptor instead.
func (*AppendLeadConversationRequest) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{0}
}

func (x *AppendLeadConversationRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *AppendLeadConversationRequest) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

// Response message for
// [LocalServicesLeadService.AppendLeadConversation][google.ads.googleads.v19.services.LocalServicesLeadService.AppendLeadConversation].
type AppendLeadConversationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. List of append conversation operation results.
	Responses     []*ConversationOrError `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendLeadConversationResponse) Reset() {
	*x = AppendLeadConversationResponse{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendLeadConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendLeadConversationResponse) ProtoMessage() {}

func (x *AppendLeadConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendLeadConversationResponse.ProtoReflect.Descriptor instead.
func (*AppendLeadConversationResponse) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{1}
}

func (x *AppendLeadConversationResponse) GetResponses() []*ConversationOrError {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Details of the conversation that needs to be appended.
type Conversation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The resource name of the local services lead that the
	// conversation should be applied to.
	LocalServicesLead string `protobuf:"bytes,1,opt,name=local_services_lead,json=localServicesLead,proto3" json:"local_services_lead,omitempty"`
	// Required. Text message that user wanted to append to lead.
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{2}
}

func (x *Conversation) GetLocalServicesLead() string {
	if x != nil {
		return x.LocalServicesLead
	}
	return ""
}

func (x *Conversation) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Result of the append conversation operation.
type ConversationOrError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Append operation response
	//
	// Types that are valid to be assigned to AppendLeadConversationResponse:
	//
	//	*ConversationOrError_LocalServicesLeadConversation
	//	*ConversationOrError_PartialFailureError
	AppendLeadConversationResponse isConversationOrError_AppendLeadConversationResponse `protobuf_oneof:"append_lead_conversation_response"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ConversationOrError) Reset() {
	*x = ConversationOrError{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationOrError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationOrError) ProtoMessage() {}

func (x *ConversationOrError) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationOrError.ProtoReflect.Descriptor instead.
func (*ConversationOrError) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationOrError) GetAppendLeadConversationResponse() isConversationOrError_AppendLeadConversationResponse {
	if x != nil {
		return x.AppendLeadConversationResponse
	}
	return nil
}

func (x *ConversationOrError) GetLocalServicesLeadConversation() string {
	if x != nil {
		if x, ok := x.AppendLeadConversationResponse.(*ConversationOrError_LocalServicesLeadConversation); ok {
			return x.LocalServicesLeadConversation
		}
	}
	return ""
}

func (x *ConversationOrError) GetPartialFailureError() *status.Status {
	if x != nil {
		if x, ok := x.AppendLeadConversationResponse.(*ConversationOrError_PartialFailureError); ok {
			return x.PartialFailureError
		}
	}
	return nil
}

type isConversationOrError_AppendLeadConversationResponse interface {
	isConversationOrError_AppendLeadConversationResponse()
}

type ConversationOrError_LocalServicesLeadConversation struct {
	// The resource name of the appended local services lead conversation.
	LocalServicesLeadConversation string `protobuf:"bytes,1,opt,name=local_services_lead_conversation,json=localServicesLeadConversation,proto3,oneof"`
}

type ConversationOrError_PartialFailureError struct {
	// Failure status when the request could not be processed.
	PartialFailureError *status.Status `protobuf:"bytes,2,opt,name=partial_failure_error,json=partialFailureError,proto3,oneof"`
}

func (*ConversationOrError_LocalServicesLeadConversation) isConversationOrError_AppendLeadConversationResponse() {
}

func (*ConversationOrError_PartialFailureError) isConversationOrError_AppendLeadConversationResponse() {
}

// Details about various factors for being satisfied with the lead.
type SurveySatisfied struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Provider's reason for being satisfied with the lead.
	SurveySatisfiedReason enums.LocalServicesLeadSurveySatisfiedReasonEnum_SurveySatisfiedReason `protobuf:"varint,1,opt,name=survey_satisfied_reason,json=surveySatisfiedReason,proto3,enum=google.ads.googleads.v19.enums.LocalServicesLeadSurveySatisfiedReasonEnum_SurveySatisfiedReason" json:"survey_satisfied_reason,omitempty"`
	// Optional. Provider's free form comments. This field is required when
	// OTHER_SATISFIED_REASON is selected as the reason.
	OtherReasonComment string `protobuf:"bytes,2,opt,name=other_reason_comment,json=otherReasonComment,proto3" json:"other_reason_comment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SurveySatisfied) Reset() {
	*x = SurveySatisfied{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SurveySatisfied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveySatisfied) ProtoMessage() {}

func (x *SurveySatisfied) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveySatisfied.ProtoReflect.Descriptor instead.
func (*SurveySatisfied) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{4}
}

func (x *SurveySatisfied) GetSurveySatisfiedReason() enums.LocalServicesLeadSurveySatisfiedReasonEnum_SurveySatisfiedReason {
	if x != nil {
		return x.SurveySatisfiedReason
	}
	return enums.LocalServicesLeadSurveySatisfiedReasonEnum_SurveySatisfiedReason(0)
}

func (x *SurveySatisfied) GetOtherReasonComment() string {
	if x != nil {
		return x.OtherReasonComment
	}
	return ""
}

// Details about various factors for not being satisfied with the lead.
type SurveyDissatisfied struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Provider's reason for not being satisfied with the lead.
	SurveyDissatisfiedReason enums.LocalServicesLeadSurveyDissatisfiedReasonEnum_SurveyDissatisfiedReason `protobuf:"varint,1,opt,name=survey_dissatisfied_reason,json=surveyDissatisfiedReason,proto3,enum=google.ads.googleads.v19.enums.LocalServicesLeadSurveyDissatisfiedReasonEnum_SurveyDissatisfiedReason" json:"survey_dissatisfied_reason,omitempty"`
	// Optional. Provider's free form comments. This field is required when
	// OTHER_DISSATISFIED_REASON is selected as the reason.
	OtherReasonComment string `protobuf:"bytes,2,opt,name=other_reason_comment,json=otherReasonComment,proto3" json:"other_reason_comment,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SurveyDissatisfied) Reset() {
	*x = SurveyDissatisfied{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SurveyDissatisfied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyDissatisfied) ProtoMessage() {}

func (x *SurveyDissatisfied) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyDissatisfied.ProtoReflect.Descriptor instead.
func (*SurveyDissatisfied) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{5}
}

func (x *SurveyDissatisfied) GetSurveyDissatisfiedReason() enums.LocalServicesLeadSurveyDissatisfiedReasonEnum_SurveyDissatisfiedReason {
	if x != nil {
		return x.SurveyDissatisfiedReason
	}
	return enums.LocalServicesLeadSurveyDissatisfiedReasonEnum_SurveyDissatisfiedReason(0)
}

func (x *SurveyDissatisfied) GetOtherReasonComment() string {
	if x != nil {
		return x.OtherReasonComment
	}
	return ""
}

// Request message for
// [LocalServicesLeadService.ProvideLeadFeedback][google.ads.googleads.v19.services.LocalServicesLeadService.ProvideLeadFeedback].
type ProvideLeadFeedbackRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The resource name of the local services lead that for which the
	// feedback is being provided.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Required. Survey answer for Local Services Ads Lead.
	SurveyAnswer enums.LocalServicesLeadSurveyAnswerEnum_SurveyAnswer `protobuf:"varint,2,opt,name=survey_answer,json=surveyAnswer,proto3,enum=google.ads.googleads.v19.enums.LocalServicesLeadSurveyAnswerEnum_SurveyAnswer" json:"survey_answer,omitempty"`
	// Details about various factors for being satisfied or dissatisfied with the
	// lead.
	//
	// Types that are valid to be assigned to SurveyDetails:
	//
	//	*ProvideLeadFeedbackRequest_SurveySatisfied
	//	*ProvideLeadFeedbackRequest_SurveyDissatisfied
	SurveyDetails isProvideLeadFeedbackRequest_SurveyDetails `protobuf_oneof:"survey_details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvideLeadFeedbackRequest) Reset() {
	*x = ProvideLeadFeedbackRequest{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvideLeadFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideLeadFeedbackRequest) ProtoMessage() {}

func (x *ProvideLeadFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideLeadFeedbackRequest.ProtoReflect.Descriptor instead.
func (*ProvideLeadFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{6}
}

func (x *ProvideLeadFeedbackRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ProvideLeadFeedbackRequest) GetSurveyAnswer() enums.LocalServicesLeadSurveyAnswerEnum_SurveyAnswer {
	if x != nil {
		return x.SurveyAnswer
	}
	return enums.LocalServicesLeadSurveyAnswerEnum_SurveyAnswer(0)
}

func (x *ProvideLeadFeedbackRequest) GetSurveyDetails() isProvideLeadFeedbackRequest_SurveyDetails {
	if x != nil {
		return x.SurveyDetails
	}
	return nil
}

func (x *ProvideLeadFeedbackRequest) GetSurveySatisfied() *SurveySatisfied {
	if x != nil {
		if x, ok := x.SurveyDetails.(*ProvideLeadFeedbackRequest_SurveySatisfied); ok {
			return x.SurveySatisfied
		}
	}
	return nil
}

func (x *ProvideLeadFeedbackRequest) GetSurveyDissatisfied() *SurveyDissatisfied {
	if x != nil {
		if x, ok := x.SurveyDetails.(*ProvideLeadFeedbackRequest_SurveyDissatisfied); ok {
			return x.SurveyDissatisfied
		}
	}
	return nil
}

type isProvideLeadFeedbackRequest_SurveyDetails interface {
	isProvideLeadFeedbackRequest_SurveyDetails()
}

type ProvideLeadFeedbackRequest_SurveySatisfied struct {
	// Details about various factors for being satisfied with the lead.
	SurveySatisfied *SurveySatisfied `protobuf:"bytes,3,opt,name=survey_satisfied,json=surveySatisfied,proto3,oneof"`
}

type ProvideLeadFeedbackRequest_SurveyDissatisfied struct {
	// Details about various factors for not being satisfied with the lead.
	SurveyDissatisfied *SurveyDissatisfied `protobuf:"bytes,4,opt,name=survey_dissatisfied,json=surveyDissatisfied,proto3,oneof"`
}

func (*ProvideLeadFeedbackRequest_SurveySatisfied) isProvideLeadFeedbackRequest_SurveyDetails() {}

func (*ProvideLeadFeedbackRequest_SurveyDissatisfied) isProvideLeadFeedbackRequest_SurveyDetails() {}

// Response message for
// [LocalServicesLeadService.ProvideLeadFeedback][google.ads.googleads.v19.services.LocalServicesLeadService.ProvideLeadFeedback].
type ProvideLeadFeedbackResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Decision of bonus credit issued or rejected. If a bonus credit is
	// issued, it will be available for use in about two months.
	CreditIssuanceDecision enums.LocalServicesLeadCreditIssuanceDecisionEnum_CreditIssuanceDecision `protobuf:"varint,1,opt,name=credit_issuance_decision,json=creditIssuanceDecision,proto3,enum=google.ads.googleads.v19.enums.LocalServicesLeadCreditIssuanceDecisionEnum_CreditIssuanceDecision" json:"credit_issuance_decision,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProvideLeadFeedbackResponse) Reset() {
	*x = ProvideLeadFeedbackResponse{}
	mi := &file_services_local_services_lead_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvideLeadFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideLeadFeedbackResponse) ProtoMessage() {}

func (x *ProvideLeadFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_local_services_lead_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideLeadFeedbackResponse.ProtoReflect.Descriptor instead.
func (*ProvideLeadFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_services_local_services_lead_service_proto_rawDescGZIP(), []int{7}
}

func (x *ProvideLeadFeedbackResponse) GetCreditIssuanceDecision() enums.LocalServicesLeadCreditIssuanceDecisionEnum_CreditIssuanceDecision {
	if x != nil {
		return x.CreditIssuanceDecision
	}
	return enums.LocalServicesLeadCreditIssuanceDecisionEnum_CreditIssuanceDecision(0)
}

var File_services_local_services_lead_service_proto protoreflect.FileDescriptor

var file_services_local_services_lead_service_proto_rawDesc = string([]byte{
	0x0a, 0x43, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x51, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x53, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x64,
	0x69, 0x73, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x1e, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2c, 0x0a, 0x2a, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a,
	0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x23, 0x0a, 0x21, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x17,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x61, 0x74, 0x69,
	0x73, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x14, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x44, 0x69, 0x73,
	0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x1a, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61,
	0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x44, 0x69, 0x73, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66,
	0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x44, 0x69, 0x73, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x44, 0x69, 0x73, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcc, 0x03, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2c, 0x0a, 0x2a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x5f,
	0x0a, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x68, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x73, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x44, 0x69, 0x73, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66,
	0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x44, 0x69, 0x73,
	0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x1b,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x18,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0xda, 0x04, 0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x02, 0x0a,
	0x16, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0xda, 0x41,
	0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48,
	0x3a, 0x01, 0x2a, 0x22, 0x43, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x3a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xea, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x22, 0x49, 0x2f, 0x76, 0x31, 0x39,
	0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x45, 0xca, 0x41, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x89, 0x02, 0x0a,
	0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x1d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e,
	0x56, 0x31, 0x39, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xca, 0x02, 0x21, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x39, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0xea, 0x02, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x39, 0x3a, 0x3a,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_services_local_services_lead_service_proto_rawDescOnce sync.Once
	file_services_local_services_lead_service_proto_rawDescData []byte
)

func file_services_local_services_lead_service_proto_rawDescGZIP() []byte {
	file_services_local_services_lead_service_proto_rawDescOnce.Do(func() {
		file_services_local_services_lead_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_local_services_lead_service_proto_rawDesc), len(file_services_local_services_lead_service_proto_rawDesc)))
	})
	return file_services_local_services_lead_service_proto_rawDescData
}

var file_services_local_services_lead_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_services_local_services_lead_service_proto_goTypes = []any{
	(*AppendLeadConversationRequest)(nil),  // 0: google.ads.googleads.v19.services.AppendLeadConversationRequest
	(*AppendLeadConversationResponse)(nil), // 1: google.ads.googleads.v19.services.AppendLeadConversationResponse
	(*Conversation)(nil),                   // 2: google.ads.googleads.v19.services.Conversation
	(*ConversationOrError)(nil),            // 3: google.ads.googleads.v19.services.ConversationOrError
	(*SurveySatisfied)(nil),                // 4: google.ads.googleads.v19.services.SurveySatisfied
	(*SurveyDissatisfied)(nil),             // 5: google.ads.googleads.v19.services.SurveyDissatisfied
	(*ProvideLeadFeedbackRequest)(nil),     // 6: google.ads.googleads.v19.services.ProvideLeadFeedbackRequest
	(*ProvideLeadFeedbackResponse)(nil),    // 7: google.ads.googleads.v19.services.ProvideLeadFeedbackResponse
	(*status.Status)(nil),                  // 8: google.rpc.Status
	(enums.LocalServicesLeadSurveySatisfiedReasonEnum_SurveySatisfiedReason)(0),       // 9: google.ads.googleads.v19.enums.LocalServicesLeadSurveySatisfiedReasonEnum.SurveySatisfiedReason
	(enums.LocalServicesLeadSurveyDissatisfiedReasonEnum_SurveyDissatisfiedReason)(0), // 10: google.ads.googleads.v19.enums.LocalServicesLeadSurveyDissatisfiedReasonEnum.SurveyDissatisfiedReason
	(enums.LocalServicesLeadSurveyAnswerEnum_SurveyAnswer)(0),                         // 11: google.ads.googleads.v19.enums.LocalServicesLeadSurveyAnswerEnum.SurveyAnswer
	(enums.LocalServicesLeadCreditIssuanceDecisionEnum_CreditIssuanceDecision)(0),     // 12: google.ads.googleads.v19.enums.LocalServicesLeadCreditIssuanceDecisionEnum.CreditIssuanceDecision
}
var file_services_local_services_lead_service_proto_depIdxs = []int32{
	2,  // 0: google.ads.googleads.v19.services.AppendLeadConversationRequest.conversations:type_name -> google.ads.googleads.v19.services.Conversation
	3,  // 1: google.ads.googleads.v19.services.AppendLeadConversationResponse.responses:type_name -> google.ads.googleads.v19.services.ConversationOrError
	8,  // 2: google.ads.googleads.v19.services.ConversationOrError.partial_failure_error:type_name -> google.rpc.Status
	9,  // 3: google.ads.googleads.v19.services.SurveySatisfied.survey_satisfied_reason:type_name -> google.ads.googleads.v19.enums.LocalServicesLeadSurveySatisfiedReasonEnum.SurveySatisfiedReason
	10, // 4: google.ads.googleads.v19.services.SurveyDissatisfied.survey_dissatisfied_reason:type_name -> google.ads.googleads.v19.enums.LocalServicesLeadSurveyDissatisfiedReasonEnum.SurveyDissatisfiedReason
	11, // 5: google.ads.googleads.v19.services.ProvideLeadFeedbackRequest.survey_answer:type_name -> google.ads.googleads.v19.enums.LocalServicesLeadSurveyAnswerEnum.SurveyAnswer
	4,  // 6: google.ads.googleads.v19.services.ProvideLeadFeedbackRequest.survey_satisfied:type_name -> google.ads.googleads.v19.services.SurveySatisfied
	5,  // 7: google.ads.googleads.v19.services.ProvideLeadFeedbackRequest.survey_dissatisfied:type_name -> google.ads.googleads.v19.services.SurveyDissatisfied
	12, // 8: google.ads.googleads.v19.services.ProvideLeadFeedbackResponse.credit_issuance_decision:type_name -> google.ads.googleads.v19.enums.LocalServicesLeadCreditIssuanceDecisionEnum.CreditIssuanceDecision
	0,  // 9: google.ads.googleads.v19.services.LocalServicesLeadService.AppendLeadConversation:input_type -> google.ads.googleads.v19.services.AppendLeadConversationRequest
	6,  // 10: google.ads.googleads.v19.services.LocalServicesLeadService.ProvideLeadFeedback:input_type -> google.ads.googleads.v19.services.ProvideLeadFeedbackRequest
	1,  // 11: google.ads.googleads.v19.services.LocalServicesLeadService.AppendLeadConversation:output_type -> google.ads.googleads.v19.services.AppendLeadConversationResponse
	7,  // 12: google.ads.googleads.v19.services.LocalServicesLeadService.ProvideLeadFeedback:output_type -> google.ads.googleads.v19.services.ProvideLeadFeedbackResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_services_local_services_lead_service_proto_init() }
func file_services_local_services_lead_service_proto_init() {
	if File_services_local_services_lead_service_proto != nil {
		return
	}
	file_services_local_services_lead_service_proto_msgTypes[3].OneofWrappers = []any{
		(*ConversationOrError_LocalServicesLeadConversation)(nil),
		(*ConversationOrError_PartialFailureError)(nil),
	}
	file_services_local_services_lead_service_proto_msgTypes[6].OneofWrappers = []any{
		(*ProvideLeadFeedbackRequest_SurveySatisfied)(nil),
		(*ProvideLeadFeedbackRequest_SurveyDissatisfied)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_local_services_lead_service_proto_rawDesc), len(file_services_local_services_lead_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_local_services_lead_service_proto_goTypes,
		DependencyIndexes: file_services_local_services_lead_service_proto_depIdxs,
		MessageInfos:      file_services_local_services_lead_service_proto_msgTypes,
	}.Build()
	File_services_local_services_lead_service_proto = out.File
	file_services_local_services_lead_service_proto_goTypes = nil
	file_services_local_services_lead_service_proto_depIdxs = nil
}
