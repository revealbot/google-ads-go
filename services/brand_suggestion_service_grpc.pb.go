// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: google/ads/googleads/v17/services/brand_suggestion_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrandSuggestionServiceClient is the client API for BrandSuggestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandSuggestionServiceClient interface {
	// Rpc to return a list of matching brands based on a prefix for this
	// customer.
	SuggestBrands(ctx context.Context, in *SuggestBrandsRequest, opts ...grpc.CallOption) (*SuggestBrandsResponse, error)
}

type brandSuggestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandSuggestionServiceClient(cc grpc.ClientConnInterface) BrandSuggestionServiceClient {
	return &brandSuggestionServiceClient{cc}
}

func (c *brandSuggestionServiceClient) SuggestBrands(ctx context.Context, in *SuggestBrandsRequest, opts ...grpc.CallOption) (*SuggestBrandsResponse, error) {
	out := new(SuggestBrandsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v17.services.BrandSuggestionService/SuggestBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandSuggestionServiceServer is the server API for BrandSuggestionService service.
// All implementations must embed UnimplementedBrandSuggestionServiceServer
// for forward compatibility
type BrandSuggestionServiceServer interface {
	// Rpc to return a list of matching brands based on a prefix for this
	// customer.
	SuggestBrands(context.Context, *SuggestBrandsRequest) (*SuggestBrandsResponse, error)
	mustEmbedUnimplementedBrandSuggestionServiceServer()
}

// UnimplementedBrandSuggestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrandSuggestionServiceServer struct {
}

func (UnimplementedBrandSuggestionServiceServer) SuggestBrands(context.Context, *SuggestBrandsRequest) (*SuggestBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestBrands not implemented")
}
func (UnimplementedBrandSuggestionServiceServer) mustEmbedUnimplementedBrandSuggestionServiceServer() {
}

// UnsafeBrandSuggestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandSuggestionServiceServer will
// result in compilation errors.
type UnsafeBrandSuggestionServiceServer interface {
	mustEmbedUnimplementedBrandSuggestionServiceServer()
}

func RegisterBrandSuggestionServiceServer(s grpc.ServiceRegistrar, srv BrandSuggestionServiceServer) {
	s.RegisterService(&BrandSuggestionService_ServiceDesc, srv)
}

func _BrandSuggestionService_SuggestBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandSuggestionServiceServer).SuggestBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v17.services.BrandSuggestionService/SuggestBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandSuggestionServiceServer).SuggestBrands(ctx, req.(*SuggestBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandSuggestionService_ServiceDesc is the grpc.ServiceDesc for BrandSuggestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandSuggestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v17.services.BrandSuggestionService",
	HandlerType: (*BrandSuggestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestBrands",
			Handler:    _BrandSuggestionService_SuggestBrands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v17/services/brand_suggestion_service.proto",
}
