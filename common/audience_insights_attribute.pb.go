// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: google/ads/googleads/v18/common/audience_insights_attribute.proto

package common

import (
	enums "github.com/revealbot/google-ads-go/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An audience attribute, with metadata about it, returned in response to a
// search.
type AudienceInsightsAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the attribute.
	Dimension enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.googleads.v18.enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension" json:"dimension,omitempty"`
	// The attribute itself.
	Attribute *AudienceInsightsAttribute `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// The human-readable name of the attribute.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A string that supplements the display_name to identify the attribute.
	// If the dimension is TOPIC, this is a brief description of the
	// Knowledge Graph entity, such as "American singer-songwriter".
	// If the dimension is CATEGORY, this is the complete path to the category in
	// The Product & Service taxonomy, for example
	// "/Apparel/Clothing/Outerwear".
	DisplayInfo string `protobuf:"bytes,4,opt,name=display_info,json=displayInfo,proto3" json:"display_info,omitempty"`
	// An estimate of the number of reachable YouTube users matching this
	// attribute in the requested location, or zero if that information is not
	// available for this attribute. This field is not populated in every
	// response.
	PotentialYoutubeReach int64 `protobuf:"varint,8,opt,name=potential_youtube_reach,json=potentialYoutubeReach,proto3" json:"potential_youtube_reach,omitempty"`
	// The share of subscribers within this attribute, between and including 0 and
	// 1. This field is not populated in every response.
	SubscriberShare float64 `protobuf:"fixed64,9,opt,name=subscriber_share,json=subscriberShare,proto3" json:"subscriber_share,omitempty"`
	// Metadata specific to the dimension of this attribute.
	//
	// Types that are assignable to DimensionMetadata:
	//
	//	*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata
	//	*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata
	//	*AudienceInsightsAttributeMetadata_LocationAttributeMetadata
	DimensionMetadata isAudienceInsightsAttributeMetadata_DimensionMetadata `protobuf_oneof:"dimension_metadata"`
}

func (x *AudienceInsightsAttributeMetadata) Reset() {
	*x = AudienceInsightsAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsAttributeMetadata) ProtoMessage() {}

func (x *AudienceInsightsAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsAttributeMetadata.ProtoReflect.Descriptor instead.
func (*AudienceInsightsAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{0}
}

func (x *AudienceInsightsAttributeMetadata) GetDimension() enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension {
	if x != nil {
		return x.Dimension
	}
	return enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension(0)
}

func (x *AudienceInsightsAttributeMetadata) GetAttribute() *AudienceInsightsAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AudienceInsightsAttributeMetadata) GetDisplayInfo() string {
	if x != nil {
		return x.DisplayInfo
	}
	return ""
}

func (x *AudienceInsightsAttributeMetadata) GetPotentialYoutubeReach() int64 {
	if x != nil {
		return x.PotentialYoutubeReach
	}
	return 0
}

func (x *AudienceInsightsAttributeMetadata) GetSubscriberShare() float64 {
	if x != nil {
		return x.SubscriberShare
	}
	return 0
}

func (m *AudienceInsightsAttributeMetadata) GetDimensionMetadata() isAudienceInsightsAttributeMetadata_DimensionMetadata {
	if m != nil {
		return m.DimensionMetadata
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetYoutubeChannelMetadata() *YouTubeChannelAttributeMetadata {
	if x, ok := x.GetDimensionMetadata().(*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata); ok {
		return x.YoutubeChannelMetadata
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetDynamicAttributeMetadata() *DynamicLineupAttributeMetadata {
	if x, ok := x.GetDimensionMetadata().(*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata); ok {
		return x.DynamicAttributeMetadata
	}
	return nil
}

func (x *AudienceInsightsAttributeMetadata) GetLocationAttributeMetadata() *LocationAttributeMetadata {
	if x, ok := x.GetDimensionMetadata().(*AudienceInsightsAttributeMetadata_LocationAttributeMetadata); ok {
		return x.LocationAttributeMetadata
	}
	return nil
}

type isAudienceInsightsAttributeMetadata_DimensionMetadata interface {
	isAudienceInsightsAttributeMetadata_DimensionMetadata()
}

type AudienceInsightsAttributeMetadata_YoutubeChannelMetadata struct {
	// Special metadata for a YouTube channel.
	YoutubeChannelMetadata *YouTubeChannelAttributeMetadata `protobuf:"bytes,5,opt,name=youtube_channel_metadata,json=youtubeChannelMetadata,proto3,oneof"`
}

type AudienceInsightsAttributeMetadata_DynamicAttributeMetadata struct {
	// Special metadata for a YouTube Dynamic Lineup.
	DynamicAttributeMetadata *DynamicLineupAttributeMetadata `protobuf:"bytes,6,opt,name=dynamic_attribute_metadata,json=dynamicAttributeMetadata,proto3,oneof"`
}

type AudienceInsightsAttributeMetadata_LocationAttributeMetadata struct {
	// Special metadata for a Location.
	LocationAttributeMetadata *LocationAttributeMetadata `protobuf:"bytes,7,opt,name=location_attribute_metadata,json=locationAttributeMetadata,proto3,oneof"`
}

func (*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata) isAudienceInsightsAttributeMetadata_DimensionMetadata() {
}

func (*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata) isAudienceInsightsAttributeMetadata_DimensionMetadata() {
}

func (*AudienceInsightsAttributeMetadata_LocationAttributeMetadata) isAudienceInsightsAttributeMetadata_DimensionMetadata() {
}

// An audience attribute that can be used to request insights about the
// audience.
type AudienceInsightsAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An audience attribute.
	//
	// Types that are assignable to Attribute:
	//
	//	*AudienceInsightsAttribute_AgeRange
	//	*AudienceInsightsAttribute_Gender
	//	*AudienceInsightsAttribute_Location
	//	*AudienceInsightsAttribute_UserInterest
	//	*AudienceInsightsAttribute_Entity
	//	*AudienceInsightsAttribute_Category
	//	*AudienceInsightsAttribute_DynamicLineup
	//	*AudienceInsightsAttribute_ParentalStatus
	//	*AudienceInsightsAttribute_IncomeRange
	//	*AudienceInsightsAttribute_YoutubeChannel
	Attribute isAudienceInsightsAttribute_Attribute `protobuf_oneof:"attribute"`
}

func (x *AudienceInsightsAttribute) Reset() {
	*x = AudienceInsightsAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsAttribute) ProtoMessage() {}

func (x *AudienceInsightsAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsAttribute.ProtoReflect.Descriptor instead.
func (*AudienceInsightsAttribute) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{1}
}

func (m *AudienceInsightsAttribute) GetAttribute() isAudienceInsightsAttribute_Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetAgeRange() *AgeRangeInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_AgeRange); ok {
		return x.AgeRange
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetGender() *GenderInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Gender); ok {
		return x.Gender
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetLocation() *LocationInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Location); ok {
		return x.Location
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetUserInterest() *UserInterestInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_UserInterest); ok {
		return x.UserInterest
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetEntity() *AudienceInsightsEntity {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Entity); ok {
		return x.Entity
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetCategory() *AudienceInsightsCategory {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_Category); ok {
		return x.Category
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetDynamicLineup() *AudienceInsightsDynamicLineup {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_DynamicLineup); ok {
		return x.DynamicLineup
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetParentalStatus() *ParentalStatusInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_ParentalStatus); ok {
		return x.ParentalStatus
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetIncomeRange() *IncomeRangeInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_IncomeRange); ok {
		return x.IncomeRange
	}
	return nil
}

func (x *AudienceInsightsAttribute) GetYoutubeChannel() *YouTubeChannelInfo {
	if x, ok := x.GetAttribute().(*AudienceInsightsAttribute_YoutubeChannel); ok {
		return x.YoutubeChannel
	}
	return nil
}

type isAudienceInsightsAttribute_Attribute interface {
	isAudienceInsightsAttribute_Attribute()
}

type AudienceInsightsAttribute_AgeRange struct {
	// An audience attribute defined by an age range.
	AgeRange *AgeRangeInfo `protobuf:"bytes,1,opt,name=age_range,json=ageRange,proto3,oneof"`
}

type AudienceInsightsAttribute_Gender struct {
	// An audience attribute defined by a gender.
	Gender *GenderInfo `protobuf:"bytes,2,opt,name=gender,proto3,oneof"`
}

type AudienceInsightsAttribute_Location struct {
	// An audience attribute defined by a geographic location.
	Location *LocationInfo `protobuf:"bytes,3,opt,name=location,proto3,oneof"`
}

type AudienceInsightsAttribute_UserInterest struct {
	// An Affinity or In-Market audience.
	UserInterest *UserInterestInfo `protobuf:"bytes,4,opt,name=user_interest,json=userInterest,proto3,oneof"`
}

type AudienceInsightsAttribute_Entity struct {
	// An audience attribute defined by interest in a topic represented by a
	// Knowledge Graph entity.
	Entity *AudienceInsightsEntity `protobuf:"bytes,5,opt,name=entity,proto3,oneof"`
}

type AudienceInsightsAttribute_Category struct {
	// An audience attribute defined by interest in a Product & Service
	// category.
	Category *AudienceInsightsCategory `protobuf:"bytes,6,opt,name=category,proto3,oneof"`
}

type AudienceInsightsAttribute_DynamicLineup struct {
	// A YouTube Dynamic Lineup.
	DynamicLineup *AudienceInsightsDynamicLineup `protobuf:"bytes,7,opt,name=dynamic_lineup,json=dynamicLineup,proto3,oneof"`
}

type AudienceInsightsAttribute_ParentalStatus struct {
	// A Parental Status value (parent, or not a parent).
	ParentalStatus *ParentalStatusInfo `protobuf:"bytes,8,opt,name=parental_status,json=parentalStatus,proto3,oneof"`
}

type AudienceInsightsAttribute_IncomeRange struct {
	// A household income percentile range.
	IncomeRange *IncomeRangeInfo `protobuf:"bytes,9,opt,name=income_range,json=incomeRange,proto3,oneof"`
}

type AudienceInsightsAttribute_YoutubeChannel struct {
	// A YouTube channel.
	YoutubeChannel *YouTubeChannelInfo `protobuf:"bytes,10,opt,name=youtube_channel,json=youtubeChannel,proto3,oneof"`
}

func (*AudienceInsightsAttribute_AgeRange) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Gender) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Location) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_UserInterest) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Entity) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_Category) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_DynamicLineup) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_ParentalStatus) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_IncomeRange) isAudienceInsightsAttribute_Attribute() {}

func (*AudienceInsightsAttribute_YoutubeChannel) isAudienceInsightsAttribute_Attribute() {}

// A Knowledge Graph entity, represented by its machine id.
type AudienceInsightsEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The machine ID (mid) of the Knowledge Graph entity.
	KnowledgeGraphMachineId string `protobuf:"bytes,1,opt,name=knowledge_graph_machine_id,json=knowledgeGraphMachineId,proto3" json:"knowledge_graph_machine_id,omitempty"`
}

func (x *AudienceInsightsEntity) Reset() {
	*x = AudienceInsightsEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsEntity) ProtoMessage() {}

func (x *AudienceInsightsEntity) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsEntity.ProtoReflect.Descriptor instead.
func (*AudienceInsightsEntity) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{2}
}

func (x *AudienceInsightsEntity) GetKnowledgeGraphMachineId() string {
	if x != nil {
		return x.KnowledgeGraphMachineId
	}
	return ""
}

// A Product and Service category.
type AudienceInsightsCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The criterion ID of the category.
	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *AudienceInsightsCategory) Reset() {
	*x = AudienceInsightsCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsCategory) ProtoMessage() {}

func (x *AudienceInsightsCategory) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsCategory.ProtoReflect.Descriptor instead.
func (*AudienceInsightsCategory) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{3}
}

func (x *AudienceInsightsCategory) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

// A YouTube Dynamic Lineup.
type AudienceInsightsDynamicLineup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The numeric ID of the dynamic lineup.
	DynamicLineupId string `protobuf:"bytes,1,opt,name=dynamic_lineup_id,json=dynamicLineupId,proto3" json:"dynamic_lineup_id,omitempty"`
}

func (x *AudienceInsightsDynamicLineup) Reset() {
	*x = AudienceInsightsDynamicLineup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceInsightsDynamicLineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceInsightsDynamicLineup) ProtoMessage() {}

func (x *AudienceInsightsDynamicLineup) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceInsightsDynamicLineup.ProtoReflect.Descriptor instead.
func (*AudienceInsightsDynamicLineup) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{4}
}

func (x *AudienceInsightsDynamicLineup) GetDynamicLineupId() string {
	if x != nil {
		return x.DynamicLineupId
	}
	return ""
}

// Metadata associated with a YouTube channel attribute.
type YouTubeChannelAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The approximate number of subscribers to the YouTube channel.
	SubscriberCount int64 `protobuf:"varint,1,opt,name=subscriber_count,json=subscriberCount,proto3" json:"subscriber_count,omitempty"`
}

func (x *YouTubeChannelAttributeMetadata) Reset() {
	*x = YouTubeChannelAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YouTubeChannelAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YouTubeChannelAttributeMetadata) ProtoMessage() {}

func (x *YouTubeChannelAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YouTubeChannelAttributeMetadata.ProtoReflect.Descriptor instead.
func (*YouTubeChannelAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{5}
}

func (x *YouTubeChannelAttributeMetadata) GetSubscriberCount() int64 {
	if x != nil {
		return x.SubscriberCount
	}
	return 0
}

// Metadata associated with a Dynamic Lineup attribute.
type DynamicLineupAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The national market associated with the lineup.
	InventoryCountry *LocationInfo `protobuf:"bytes,1,opt,name=inventory_country,json=inventoryCountry,proto3" json:"inventory_country,omitempty"`
	// The median number of impressions per month on this lineup.
	MedianMonthlyInventory *int64 `protobuf:"varint,2,opt,name=median_monthly_inventory,json=medianMonthlyInventory,proto3,oneof" json:"median_monthly_inventory,omitempty"`
	// The lower end of a range containing the number of channels in the lineup.
	ChannelCountLowerBound *int64 `protobuf:"varint,3,opt,name=channel_count_lower_bound,json=channelCountLowerBound,proto3,oneof" json:"channel_count_lower_bound,omitempty"`
	// The upper end of a range containing the number of channels in the lineup.
	ChannelCountUpperBound *int64 `protobuf:"varint,4,opt,name=channel_count_upper_bound,json=channelCountUpperBound,proto3,oneof" json:"channel_count_upper_bound,omitempty"`
	// Examples of channels that are included in the lineup.
	SampleChannels []*DynamicLineupAttributeMetadata_SampleChannel `protobuf:"bytes,5,rep,name=sample_channels,json=sampleChannels,proto3" json:"sample_channels,omitempty"`
}

func (x *DynamicLineupAttributeMetadata) Reset() {
	*x = DynamicLineupAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicLineupAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicLineupAttributeMetadata) ProtoMessage() {}

func (x *DynamicLineupAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicLineupAttributeMetadata.ProtoReflect.Descriptor instead.
func (*DynamicLineupAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{6}
}

func (x *DynamicLineupAttributeMetadata) GetInventoryCountry() *LocationInfo {
	if x != nil {
		return x.InventoryCountry
	}
	return nil
}

func (x *DynamicLineupAttributeMetadata) GetMedianMonthlyInventory() int64 {
	if x != nil && x.MedianMonthlyInventory != nil {
		return *x.MedianMonthlyInventory
	}
	return 0
}

func (x *DynamicLineupAttributeMetadata) GetChannelCountLowerBound() int64 {
	if x != nil && x.ChannelCountLowerBound != nil {
		return *x.ChannelCountLowerBound
	}
	return 0
}

func (x *DynamicLineupAttributeMetadata) GetChannelCountUpperBound() int64 {
	if x != nil && x.ChannelCountUpperBound != nil {
		return *x.ChannelCountUpperBound
	}
	return 0
}

func (x *DynamicLineupAttributeMetadata) GetSampleChannels() []*DynamicLineupAttributeMetadata_SampleChannel {
	if x != nil {
		return x.SampleChannels
	}
	return nil
}

// Metadata associated with a Location attribute.
type LocationAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The country location that this attribute’s sub country location is located
	// in.
	CountryLocation *LocationInfo `protobuf:"bytes,1,opt,name=country_location,json=countryLocation,proto3" json:"country_location,omitempty"`
}

func (x *LocationAttributeMetadata) Reset() {
	*x = LocationAttributeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAttributeMetadata) ProtoMessage() {}

func (x *LocationAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAttributeMetadata.ProtoReflect.Descriptor instead.
func (*LocationAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{7}
}

func (x *LocationAttributeMetadata) GetCountryLocation() *LocationInfo {
	if x != nil {
		return x.CountryLocation
	}
	return nil
}

// A YouTube channel returned as an example of the content in a lineup.
type DynamicLineupAttributeMetadata_SampleChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A YouTube channel.
	YoutubeChannel *YouTubeChannelInfo `protobuf:"bytes,1,opt,name=youtube_channel,json=youtubeChannel,proto3" json:"youtube_channel,omitempty"`
	// The name of the sample channel.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Metadata for the sample channel.
	YoutubeChannelMetadata *YouTubeChannelAttributeMetadata `protobuf:"bytes,3,opt,name=youtube_channel_metadata,json=youtubeChannelMetadata,proto3" json:"youtube_channel_metadata,omitempty"`
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) Reset() {
	*x = DynamicLineupAttributeMetadata_SampleChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_audience_insights_attribute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicLineupAttributeMetadata_SampleChannel) ProtoMessage() {}

func (x *DynamicLineupAttributeMetadata_SampleChannel) ProtoReflect() protoreflect.Message {
	mi := &file_common_audience_insights_attribute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicLineupAttributeMetadata_SampleChannel.ProtoReflect.Descriptor instead.
func (*DynamicLineupAttributeMetadata_SampleChannel) Descriptor() ([]byte, []int) {
	return file_common_audience_insights_attribute_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) GetYoutubeChannel() *YouTubeChannelInfo {
	if x != nil {
		return x.YoutubeChannel
	}
	return nil
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DynamicLineupAttributeMetadata_SampleChannel) GetYoutubeChannelMetadata() *YouTubeChannelAttributeMetadata {
	if x != nil {
		return x.YoutubeChannelMetadata
	}
	return nil
}

var File_common_audience_insights_attribute_proto protoreflect.FileDescriptor

var file_common_audience_insights_attribute_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x38, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x38, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x38, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x06, 0x0a, 0x21, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x75, 0x0a,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x18, 0x79, 0x6f, 0x75, 0x74, 0x75,
	0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x6f, 0x75, 0x54,
	0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7f, 0x0a, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7c, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0x0a, 0x12, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x07, 0x0a, 0x19, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x67,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x67, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x5e, 0x0a, 0x0f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x6f, 0x75, 0x54,
	0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x0b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x5a, 0x0a,
	0x16, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1a, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x17, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1d, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x11,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4c, 0x0a,
	0x1f, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x06, 0x0a, 0x1e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a,
	0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x16,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x16,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x1a, 0x8c, 0x02, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x0f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59,
	0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x18, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x75, 0x0a, 0x19, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0xfe, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x1e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x38, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56,
	0x31, 0x38, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73,
	0x5c, 0x56, 0x31, 0x38, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xea, 0x02, 0x23, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x38, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_audience_insights_attribute_proto_rawDescOnce sync.Once
	file_common_audience_insights_attribute_proto_rawDescData = file_common_audience_insights_attribute_proto_rawDesc
)

func file_common_audience_insights_attribute_proto_rawDescGZIP() []byte {
	file_common_audience_insights_attribute_proto_rawDescOnce.Do(func() {
		file_common_audience_insights_attribute_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_audience_insights_attribute_proto_rawDescData)
	})
	return file_common_audience_insights_attribute_proto_rawDescData
}

var file_common_audience_insights_attribute_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_common_audience_insights_attribute_proto_goTypes = []interface{}{
	(*AudienceInsightsAttributeMetadata)(nil),                          // 0: google.ads.googleads.v18.common.AudienceInsightsAttributeMetadata
	(*AudienceInsightsAttribute)(nil),                                  // 1: google.ads.googleads.v18.common.AudienceInsightsAttribute
	(*AudienceInsightsEntity)(nil),                                     // 2: google.ads.googleads.v18.common.AudienceInsightsEntity
	(*AudienceInsightsCategory)(nil),                                   // 3: google.ads.googleads.v18.common.AudienceInsightsCategory
	(*AudienceInsightsDynamicLineup)(nil),                              // 4: google.ads.googleads.v18.common.AudienceInsightsDynamicLineup
	(*YouTubeChannelAttributeMetadata)(nil),                            // 5: google.ads.googleads.v18.common.YouTubeChannelAttributeMetadata
	(*DynamicLineupAttributeMetadata)(nil),                             // 6: google.ads.googleads.v18.common.DynamicLineupAttributeMetadata
	(*LocationAttributeMetadata)(nil),                                  // 7: google.ads.googleads.v18.common.LocationAttributeMetadata
	(*DynamicLineupAttributeMetadata_SampleChannel)(nil),               // 8: google.ads.googleads.v18.common.DynamicLineupAttributeMetadata.SampleChannel
	(enums.AudienceInsightsDimensionEnum_AudienceInsightsDimension)(0), // 9: google.ads.googleads.v18.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	(*AgeRangeInfo)(nil),                                               // 10: google.ads.googleads.v18.common.AgeRangeInfo
	(*GenderInfo)(nil),                                                 // 11: google.ads.googleads.v18.common.GenderInfo
	(*LocationInfo)(nil),                                               // 12: google.ads.googleads.v18.common.LocationInfo
	(*UserInterestInfo)(nil),                                           // 13: google.ads.googleads.v18.common.UserInterestInfo
	(*ParentalStatusInfo)(nil),                                         // 14: google.ads.googleads.v18.common.ParentalStatusInfo
	(*IncomeRangeInfo)(nil),                                            // 15: google.ads.googleads.v18.common.IncomeRangeInfo
	(*YouTubeChannelInfo)(nil),                                         // 16: google.ads.googleads.v18.common.YouTubeChannelInfo
}
var file_common_audience_insights_attribute_proto_depIdxs = []int32{
	9,  // 0: google.ads.googleads.v18.common.AudienceInsightsAttributeMetadata.dimension:type_name -> google.ads.googleads.v18.enums.AudienceInsightsDimensionEnum.AudienceInsightsDimension
	1,  // 1: google.ads.googleads.v18.common.AudienceInsightsAttributeMetadata.attribute:type_name -> google.ads.googleads.v18.common.AudienceInsightsAttribute
	5,  // 2: google.ads.googleads.v18.common.AudienceInsightsAttributeMetadata.youtube_channel_metadata:type_name -> google.ads.googleads.v18.common.YouTubeChannelAttributeMetadata
	6,  // 3: google.ads.googleads.v18.common.AudienceInsightsAttributeMetadata.dynamic_attribute_metadata:type_name -> google.ads.googleads.v18.common.DynamicLineupAttributeMetadata
	7,  // 4: google.ads.googleads.v18.common.AudienceInsightsAttributeMetadata.location_attribute_metadata:type_name -> google.ads.googleads.v18.common.LocationAttributeMetadata
	10, // 5: google.ads.googleads.v18.common.AudienceInsightsAttribute.age_range:type_name -> google.ads.googleads.v18.common.AgeRangeInfo
	11, // 6: google.ads.googleads.v18.common.AudienceInsightsAttribute.gender:type_name -> google.ads.googleads.v18.common.GenderInfo
	12, // 7: google.ads.googleads.v18.common.AudienceInsightsAttribute.location:type_name -> google.ads.googleads.v18.common.LocationInfo
	13, // 8: google.ads.googleads.v18.common.AudienceInsightsAttribute.user_interest:type_name -> google.ads.googleads.v18.common.UserInterestInfo
	2,  // 9: google.ads.googleads.v18.common.AudienceInsightsAttribute.entity:type_name -> google.ads.googleads.v18.common.AudienceInsightsEntity
	3,  // 10: google.ads.googleads.v18.common.AudienceInsightsAttribute.category:type_name -> google.ads.googleads.v18.common.AudienceInsightsCategory
	4,  // 11: google.ads.googleads.v18.common.AudienceInsightsAttribute.dynamic_lineup:type_name -> google.ads.googleads.v18.common.AudienceInsightsDynamicLineup
	14, // 12: google.ads.googleads.v18.common.AudienceInsightsAttribute.parental_status:type_name -> google.ads.googleads.v18.common.ParentalStatusInfo
	15, // 13: google.ads.googleads.v18.common.AudienceInsightsAttribute.income_range:type_name -> google.ads.googleads.v18.common.IncomeRangeInfo
	16, // 14: google.ads.googleads.v18.common.AudienceInsightsAttribute.youtube_channel:type_name -> google.ads.googleads.v18.common.YouTubeChannelInfo
	12, // 15: google.ads.googleads.v18.common.DynamicLineupAttributeMetadata.inventory_country:type_name -> google.ads.googleads.v18.common.LocationInfo
	8,  // 16: google.ads.googleads.v18.common.DynamicLineupAttributeMetadata.sample_channels:type_name -> google.ads.googleads.v18.common.DynamicLineupAttributeMetadata.SampleChannel
	12, // 17: google.ads.googleads.v18.common.LocationAttributeMetadata.country_location:type_name -> google.ads.googleads.v18.common.LocationInfo
	16, // 18: google.ads.googleads.v18.common.DynamicLineupAttributeMetadata.SampleChannel.youtube_channel:type_name -> google.ads.googleads.v18.common.YouTubeChannelInfo
	5,  // 19: google.ads.googleads.v18.common.DynamicLineupAttributeMetadata.SampleChannel.youtube_channel_metadata:type_name -> google.ads.googleads.v18.common.YouTubeChannelAttributeMetadata
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_common_audience_insights_attribute_proto_init() }
func file_common_audience_insights_attribute_proto_init() {
	if File_common_audience_insights_attribute_proto != nil {
		return
	}
	file_common_criteria_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_audience_insights_attribute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceInsightsDynamicLineup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YouTubeChannelAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicLineupAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationAttributeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_audience_insights_attribute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicLineupAttributeMetadata_SampleChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_audience_insights_attribute_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AudienceInsightsAttributeMetadata_YoutubeChannelMetadata)(nil),
		(*AudienceInsightsAttributeMetadata_DynamicAttributeMetadata)(nil),
		(*AudienceInsightsAttributeMetadata_LocationAttributeMetadata)(nil),
	}
	file_common_audience_insights_attribute_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AudienceInsightsAttribute_AgeRange)(nil),
		(*AudienceInsightsAttribute_Gender)(nil),
		(*AudienceInsightsAttribute_Location)(nil),
		(*AudienceInsightsAttribute_UserInterest)(nil),
		(*AudienceInsightsAttribute_Entity)(nil),
		(*AudienceInsightsAttribute_Category)(nil),
		(*AudienceInsightsAttribute_DynamicLineup)(nil),
		(*AudienceInsightsAttribute_ParentalStatus)(nil),
		(*AudienceInsightsAttribute_IncomeRange)(nil),
		(*AudienceInsightsAttribute_YoutubeChannel)(nil),
	}
	file_common_audience_insights_attribute_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_audience_insights_attribute_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_audience_insights_attribute_proto_goTypes,
		DependencyIndexes: file_common_audience_insights_attribute_proto_depIdxs,
		MessageInfos:      file_common_audience_insights_attribute_proto_msgTypes,
	}.Build()
	File_common_audience_insights_attribute_proto = out.File
	file_common_audience_insights_attribute_proto_rawDesc = nil
	file_common_audience_insights_attribute_proto_goTypes = nil
	file_common_audience_insights_attribute_proto_depIdxs = nil
}
