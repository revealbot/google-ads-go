// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: google/ads/googleads/v19/errors/asset_group_listing_group_filter_error.proto

package errors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum describing possible asset group listing group filter errors.
type AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError int32

const (
	// Enum unspecified.
	AssetGroupListingGroupFilterErrorEnum_UNSPECIFIED AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 0
	// The received error code is not known in this version.
	AssetGroupListingGroupFilterErrorEnum_UNKNOWN AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 1
	// Listing group tree is too deep.
	AssetGroupListingGroupFilterErrorEnum_TREE_TOO_DEEP AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 2
	// Listing Group UNIT node cannot have children.
	AssetGroupListingGroupFilterErrorEnum_UNIT_CANNOT_HAVE_CHILDREN AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 3
	// Listing Group SUBDIVISION node must have everything else child.
	AssetGroupListingGroupFilterErrorEnum_SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 4
	// Dimension type of Listing Group must be the same as that of its siblings.
	AssetGroupListingGroupFilterErrorEnum_DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 5
	// The sibling Listing Groups target exactly the same dimension value.
	AssetGroupListingGroupFilterErrorEnum_SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 6
	// The dimension type is the same as one of the ancestor Listing Groups.
	AssetGroupListingGroupFilterErrorEnum_SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 7
	// Each Listing Group tree must have a single root.
	AssetGroupListingGroupFilterErrorEnum_MULTIPLE_ROOTS AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 8
	// Invalid Listing Group dimension value.
	AssetGroupListingGroupFilterErrorEnum_INVALID_DIMENSION_VALUE AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 9
	// Hierarchical dimension must refine a dimension of the same type.
	AssetGroupListingGroupFilterErrorEnum_MUST_REFINE_HIERARCHICAL_PARENT_TYPE AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 10
	// Invalid Product Bidding Category.
	AssetGroupListingGroupFilterErrorEnum_INVALID_PRODUCT_BIDDING_CATEGORY AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 11
	// Modifying case value is allowed only while updating the entire subtree at
	// the same time.
	AssetGroupListingGroupFilterErrorEnum_CHANGING_CASE_VALUE_WITH_CHILDREN AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 12
	// Subdivision node has children which must be removed first.
	AssetGroupListingGroupFilterErrorEnum_SUBDIVISION_HAS_CHILDREN AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 13
	// Dimension can't subdivide everything-else node in its own hierarchy.
	AssetGroupListingGroupFilterErrorEnum_CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 14
	// This dimension type is not allowed in this context.
	AssetGroupListingGroupFilterErrorEnum_DIMENSION_TYPE_NOT_ALLOWED AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 15
	// All the webpage filters under an AssetGroup should be distinct.
	AssetGroupListingGroupFilterErrorEnum_DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 16
	// Filter of the listing source type is not allowed in the context.
	AssetGroupListingGroupFilterErrorEnum_LISTING_SOURCE_NOT_ALLOWED AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 17
	// Exclusion filters are not allowed in the context.
	AssetGroupListingGroupFilterErrorEnum_FILTER_EXCLUSION_NOT_ALLOWED AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 18
	// All the filters under an AssetGroup should have the same listing source.
	AssetGroupListingGroupFilterErrorEnum_MULTIPLE_LISTING_SOURCES AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 19
	// All the conditions in a webpage needs to be of same type.
	AssetGroupListingGroupFilterErrorEnum_MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 20
	// All the webpage types of the filters under an AssetGroup should be of
	// same type. Example: All the webpage types can be of type custom_label or
	// url_contains but not both.
	AssetGroupListingGroupFilterErrorEnum_MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 21
	// All page feed filter nodes are root nodes and they can't have a parent.
	AssetGroupListingGroupFilterErrorEnum_PAGE_FEED_FILTER_HAS_PARENT AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 22
	// There cannot be more than one mutate operation per request that targets a
	// single asset group listing group filter.
	AssetGroupListingGroupFilterErrorEnum_MULTIPLE_OPERATIONS_ON_ONE_NODE AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 23
	// The tree is in an invalid state in the database. Any changes that don't
	// fix its issues will fail validation.
	AssetGroupListingGroupFilterErrorEnum_TREE_WAS_INVALID_BEFORE_MUTATION AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = 24
)

// Enum value maps for AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.
var (
	AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "UNKNOWN",
		2:  "TREE_TOO_DEEP",
		3:  "UNIT_CANNOT_HAVE_CHILDREN",
		4:  "SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD",
		5:  "DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS",
		6:  "SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS",
		7:  "SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS",
		8:  "MULTIPLE_ROOTS",
		9:  "INVALID_DIMENSION_VALUE",
		10: "MUST_REFINE_HIERARCHICAL_PARENT_TYPE",
		11: "INVALID_PRODUCT_BIDDING_CATEGORY",
		12: "CHANGING_CASE_VALUE_WITH_CHILDREN",
		13: "SUBDIVISION_HAS_CHILDREN",
		14: "CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE",
		15: "DIMENSION_TYPE_NOT_ALLOWED",
		16: "DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP",
		17: "LISTING_SOURCE_NOT_ALLOWED",
		18: "FILTER_EXCLUSION_NOT_ALLOWED",
		19: "MULTIPLE_LISTING_SOURCES",
		20: "MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED",
		21: "MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP",
		22: "PAGE_FEED_FILTER_HAS_PARENT",
		23: "MULTIPLE_OPERATIONS_ON_ONE_NODE",
		24: "TREE_WAS_INVALID_BEFORE_MUTATION",
	}
	AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError_value = map[string]int32{
		"UNSPECIFIED":               0,
		"UNKNOWN":                   1,
		"TREE_TOO_DEEP":             2,
		"UNIT_CANNOT_HAVE_CHILDREN": 3,
		"SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD":  4,
		"DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS":    5,
		"SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS":        6,
		"SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS":        7,
		"MULTIPLE_ROOTS":                               8,
		"INVALID_DIMENSION_VALUE":                      9,
		"MUST_REFINE_HIERARCHICAL_PARENT_TYPE":         10,
		"INVALID_PRODUCT_BIDDING_CATEGORY":             11,
		"CHANGING_CASE_VALUE_WITH_CHILDREN":            12,
		"SUBDIVISION_HAS_CHILDREN":                     13,
		"CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE":   14,
		"DIMENSION_TYPE_NOT_ALLOWED":                   15,
		"DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP":   16,
		"LISTING_SOURCE_NOT_ALLOWED":                   17,
		"FILTER_EXCLUSION_NOT_ALLOWED":                 18,
		"MULTIPLE_LISTING_SOURCES":                     19,
		"MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED": 20,
		"MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP":       21,
		"PAGE_FEED_FILTER_HAS_PARENT":                  22,
		"MULTIPLE_OPERATIONS_ON_ONE_NODE":              23,
		"TREE_WAS_INVALID_BEFORE_MUTATION":             24,
	}
)

func (x AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) Enum() *AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError {
	p := new(AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError)
	*p = x
	return p
}

func (x AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_asset_group_listing_group_filter_error_proto_enumTypes[0].Descriptor()
}

func (AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) Type() protoreflect.EnumType {
	return &file_errors_asset_group_listing_group_filter_error_proto_enumTypes[0]
}

func (x AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.Descriptor instead.
func (AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) EnumDescriptor() ([]byte, []int) {
	return file_errors_asset_group_listing_group_filter_error_proto_rawDescGZIP(), []int{0, 0}
}

// Container for enum describing possible asset group listing group filter
// errors.
type AssetGroupListingGroupFilterErrorEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroupListingGroupFilterErrorEnum) Reset() {
	*x = AssetGroupListingGroupFilterErrorEnum{}
	mi := &file_errors_asset_group_listing_group_filter_error_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroupListingGroupFilterErrorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroupListingGroupFilterErrorEnum) ProtoMessage() {}

func (x *AssetGroupListingGroupFilterErrorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_errors_asset_group_listing_group_filter_error_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroupListingGroupFilterErrorEnum.ProtoReflect.Descriptor instead.
func (*AssetGroupListingGroupFilterErrorEnum) Descriptor() ([]byte, []int) {
	return file_errors_asset_group_listing_group_filter_error_proto_rawDescGZIP(), []int{0}
}

var File_errors_asset_group_listing_group_filter_error_proto protoreflect.FileDescriptor

var file_errors_asset_group_listing_group_filter_error_proto_rawDesc = string([]byte{
	0x0a, 0x4c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0xc3, 0x07, 0x0a, 0x25, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x99, 0x07, 0x0a, 0x21, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x48, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x03, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x55, 0x42, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x55, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x54, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x04,
	0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x05, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f,
	0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x53, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x53, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x42, 0x49, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x55, 0x42, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x45,
	0x52, 0x41, 0x52, 0x43, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x54,
	0x48, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x4c,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x12, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x50, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x14, 0x12, 0x2a, 0x0a,
	0x26, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x50, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x47,
	0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x17, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x57, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x18, 0x42, 0x86, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x26, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x3b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0xa2, 0x02,
	0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64,
	0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x39, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c,
	0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31,
	0x39, 0x5c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0xea, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64,
	0x73, 0x3a, 0x3a, 0x56, 0x31, 0x39, 0x3a, 0x3a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_errors_asset_group_listing_group_filter_error_proto_rawDescOnce sync.Once
	file_errors_asset_group_listing_group_filter_error_proto_rawDescData []byte
)

func file_errors_asset_group_listing_group_filter_error_proto_rawDescGZIP() []byte {
	file_errors_asset_group_listing_group_filter_error_proto_rawDescOnce.Do(func() {
		file_errors_asset_group_listing_group_filter_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_errors_asset_group_listing_group_filter_error_proto_rawDesc), len(file_errors_asset_group_listing_group_filter_error_proto_rawDesc)))
	})
	return file_errors_asset_group_listing_group_filter_error_proto_rawDescData
}

var file_errors_asset_group_listing_group_filter_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_errors_asset_group_listing_group_filter_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_errors_asset_group_listing_group_filter_error_proto_goTypes = []any{
	(AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError)(0), // 0: google.ads.googleads.v19.errors.AssetGroupListingGroupFilterErrorEnum.AssetGroupListingGroupFilterError
	(*AssetGroupListingGroupFilterErrorEnum)(nil),                                // 1: google.ads.googleads.v19.errors.AssetGroupListingGroupFilterErrorEnum
}
var file_errors_asset_group_listing_group_filter_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_errors_asset_group_listing_group_filter_error_proto_init() }
func file_errors_asset_group_listing_group_filter_error_proto_init() {
	if File_errors_asset_group_listing_group_filter_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_errors_asset_group_listing_group_filter_error_proto_rawDesc), len(file_errors_asset_group_listing_group_filter_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_asset_group_listing_group_filter_error_proto_goTypes,
		DependencyIndexes: file_errors_asset_group_listing_group_filter_error_proto_depIdxs,
		EnumInfos:         file_errors_asset_group_listing_group_filter_error_proto_enumTypes,
		MessageInfos:      file_errors_asset_group_listing_group_filter_error_proto_msgTypes,
	}.Build()
	File_errors_asset_group_listing_group_filter_error_proto = out.File
	file_errors_asset_group_listing_group_filter_error_proto_goTypes = nil
	file_errors_asset_group_listing_group_filter_error_proto_depIdxs = nil
}
