// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: google/ads/googleads/v19/resources/shopping_product.proto

package resources

import (
	enums "github.com/revealbot/google-ads-go/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A shopping product from Google Merchant Center that can be advertised by
// campaigns.
//
// The resource returns currently existing products from Google Merchant Center
// accounts linked with the customer. A campaign includes a product by
// specifying its merchant id (or, if available, the Multi Client Account id of
// the merchant) in the `ShoppingSetting`, and can limit the inclusion to
// products having a specified feed label. Standard Shopping campaigns can also
// limit the inclusion through a `campaign_criterion.listing_scope`.
//
// Queries to this resource specify a scope:
// Account:
//   - Filters on campaigns or ad groups are not specified.
//   - All products from the linked Google Merchant Center accounts are
//     returned.
//   - Metrics and some fields (see the per-field documentation) are aggregated
//     across all Shopping and Performance Max campaigns that include a product.
//
// Campaign:
//   - An equality filter on `campaign` is specified. Supported campaign types
//     are Shopping, Performance Max, Demand Gen, Video.
//   - Only products that are included by the specified campaign are returned.
//   - Metrics and some fields (see the per-field documentation) are restricted
//     to the specified campaign.
//
// Ad group:
//   - An equality filter on `ad group` and `campaign` is specified. Supported
//     campaign types are Shopping, Demand Gen, Video.
//   - Only products that are included by the specified campaign are returned.
//   - Metrics and some fields (see the per-field documentation) are restricted
//     to the specified ad group.
//
// Note that segmentation by date segments is not permitted and will return
// UNSUPPORTED_DATE_SEGMENTATION error. On the other hand, filtering on date
// segments is allowed.
type ShoppingProduct struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The resource name of the shopping product.
	// Shopping product resource names have the form:
	//
	// `customers/{customer_id}/shoppingProducts/{merchant_center_id}~{channel}~{language_code}~{feed_label}~{item_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The id of the merchant that owns the product.
	MerchantCenterId int64 `protobuf:"varint,2,opt,name=merchant_center_id,json=merchantCenterId,proto3" json:"merchant_center_id,omitempty"`
	// Output only. The product channel describing the locality of the product.
	Channel enums.ProductChannelEnum_ProductChannel `protobuf:"varint,3,opt,name=channel,proto3,enum=google.ads.googleads.v19.enums.ProductChannelEnum_ProductChannel" json:"channel,omitempty"`
	// Output only. The language code as provided by the merchant, in BCP 47
	// format.
	LanguageCode string `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Output only. The product feed label as provided by the merchant.
	FeedLabel string `protobuf:"bytes,5,opt,name=feed_label,json=feedLabel,proto3" json:"feed_label,omitempty"`
	// Output only. The item id of the product as provided by the merchant.
	ItemId string `protobuf:"bytes,6,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// Output only. The id of the Multi Client Account of the merchant, if
	// present.
	MultiClientAccountId *int64 `protobuf:"varint,7,opt,name=multi_client_account_id,json=multiClientAccountId,proto3,oneof" json:"multi_client_account_id,omitempty"`
	// Output only. The title of the product as provided by the merchant.
	Title *string `protobuf:"bytes,8,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Output only. The brand of the product as provided by the merchant.
	Brand *string `protobuf:"bytes,9,opt,name=brand,proto3,oneof" json:"brand,omitempty"`
	// Output only. The price of the product in micros as provided by the
	// merchant, in the currency specified in `currency_code` (e.g. $2.97 is
	// reported as 2970000).
	PriceMicros *int64 `protobuf:"varint,10,opt,name=price_micros,json=priceMicros,proto3,oneof" json:"price_micros,omitempty"`
	// Output only. The currency code as provided by the merchant, in ISO 4217
	// format.
	CurrencyCode *string `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3,oneof" json:"currency_code,omitempty"`
	// Output only. The channel exclusivity of the product as provided by the
	// merchant.
	ChannelExclusivity *enums.ProductChannelExclusivityEnum_ProductChannelExclusivity `protobuf:"varint,12,opt,name=channel_exclusivity,json=channelExclusivity,proto3,enum=google.ads.googleads.v19.enums.ProductChannelExclusivityEnum_ProductChannelExclusivity,oneof" json:"channel_exclusivity,omitempty"`
	// Output only. The condition of the product as provided by the merchant.
	Condition *enums.ProductConditionEnum_ProductCondition `protobuf:"varint,13,opt,name=condition,proto3,enum=google.ads.googleads.v19.enums.ProductConditionEnum_ProductCondition,oneof" json:"condition,omitempty"`
	// Output only. The availability of the product as provided by the merchant.
	Availability *enums.ProductAvailabilityEnum_ProductAvailability `protobuf:"varint,14,opt,name=availability,proto3,enum=google.ads.googleads.v19.enums.ProductAvailabilityEnum_ProductAvailability,oneof" json:"availability,omitempty"`
	// Output only. Upper-case two-letter ISO 3166-1 code of the regions where the
	// product is intended to be shown in ads.
	TargetCountries []string `protobuf:"bytes,15,rep,name=target_countries,json=targetCountries,proto3" json:"target_countries,omitempty"`
	// Output only. The custom attribute 0 of the product as provided by the
	// merchant.
	CustomAttribute0 *string `protobuf:"bytes,16,opt,name=custom_attribute0,json=customAttribute0,proto3,oneof" json:"custom_attribute0,omitempty"`
	// Output only. The custom attribute 1 of the product as provided by the
	// merchant.
	CustomAttribute1 *string `protobuf:"bytes,17,opt,name=custom_attribute1,json=customAttribute1,proto3,oneof" json:"custom_attribute1,omitempty"`
	// Output only. The custom attribute 2 of the product as provided by the
	// merchant.
	CustomAttribute2 *string `protobuf:"bytes,18,opt,name=custom_attribute2,json=customAttribute2,proto3,oneof" json:"custom_attribute2,omitempty"`
	// Output only. The custom attribute 3 of the product as provided by the
	// merchant.
	CustomAttribute3 *string `protobuf:"bytes,19,opt,name=custom_attribute3,json=customAttribute3,proto3,oneof" json:"custom_attribute3,omitempty"`
	// Output only. The custom attribute 4 of the product as provided by the
	// merchant.
	CustomAttribute4 *string `protobuf:"bytes,20,opt,name=custom_attribute4,json=customAttribute4,proto3,oneof" json:"custom_attribute4,omitempty"`
	// Output only. The category level 1 of the product.
	CategoryLevel1 *string `protobuf:"bytes,21,opt,name=category_level1,json=categoryLevel1,proto3,oneof" json:"category_level1,omitempty"`
	// Output only. The category level 2 of the product.
	CategoryLevel2 *string `protobuf:"bytes,22,opt,name=category_level2,json=categoryLevel2,proto3,oneof" json:"category_level2,omitempty"`
	// Output only. The category level 3 of the product.
	CategoryLevel3 *string `protobuf:"bytes,23,opt,name=category_level3,json=categoryLevel3,proto3,oneof" json:"category_level3,omitempty"`
	// Output only. The category level 4 of the product.
	CategoryLevel4 *string `protobuf:"bytes,24,opt,name=category_level4,json=categoryLevel4,proto3,oneof" json:"category_level4,omitempty"`
	// Output only. The category level 5 of the product.
	CategoryLevel5 *string `protobuf:"bytes,25,opt,name=category_level5,json=categoryLevel5,proto3,oneof" json:"category_level5,omitempty"`
	// Output only. The product type level 1 as provided by the merchant.
	ProductTypeLevel1 *string `protobuf:"bytes,26,opt,name=product_type_level1,json=productTypeLevel1,proto3,oneof" json:"product_type_level1,omitempty"`
	// Output only. The product type level 2 as provided by the merchant.
	ProductTypeLevel2 *string `protobuf:"bytes,27,opt,name=product_type_level2,json=productTypeLevel2,proto3,oneof" json:"product_type_level2,omitempty"`
	// Output only. The product type level 3 as provided by the merchant.
	ProductTypeLevel3 *string `protobuf:"bytes,28,opt,name=product_type_level3,json=productTypeLevel3,proto3,oneof" json:"product_type_level3,omitempty"`
	// Output only. The product type level 4 as provided by the merchant.
	ProductTypeLevel4 *string `protobuf:"bytes,29,opt,name=product_type_level4,json=productTypeLevel4,proto3,oneof" json:"product_type_level4,omitempty"`
	// Output only. The product type level 5 as provided by the merchant.
	ProductTypeLevel5 *string `protobuf:"bytes,30,opt,name=product_type_level5,json=productTypeLevel5,proto3,oneof" json:"product_type_level5,omitempty"`
	// Output only. The effective maximum cost-per-click (effective max. CPC) of
	// the product. This field is available only if the query specifies the
	// campaign or ad group scope, and if the campaign uses manual bidding. The
	// value is the highest bid set for the product in product groups across all
	// enabled ad groups. It represents the most you're willing to pay for a click
	// on the product. This field can take up to 24 hours to update.
	EffectiveMaxCpcMicros *int64 `protobuf:"varint,31,opt,name=effective_max_cpc_micros,json=effectiveMaxCpcMicros,proto3,oneof" json:"effective_max_cpc_micros,omitempty"`
	// Output only. The status that indicates whether the product can show in ads.
	// The value of this field is restricted to the scope specified in the query,
	// see the documentation of the resource.
	// This field can take up to 24 hours to update.
	Status enums.ProductStatusEnum_ProductStatus `protobuf:"varint,32,opt,name=status,proto3,enum=google.ads.googleads.v19.enums.ProductStatusEnum_ProductStatus" json:"status,omitempty"`
	// Output only. The list of issues affecting whether the product can show in
	// ads. The value of this field is restricted to the scope specified in the
	// query, see the documentation of the resource. This field can take up to 24
	// hours to update.
	Issues []*ShoppingProduct_ProductIssue `protobuf:"bytes,33,rep,name=issues,proto3" json:"issues,omitempty"`
	// Output only. A campaign that includes the product.
	// This field is selectable only in the campaign scope, which requires an
	// equality filter on `campaign`.
	Campaign *string `protobuf:"bytes,34,opt,name=campaign,proto3,oneof" json:"campaign,omitempty"`
	// Output only. An ad group of a campaign that includes the product.
	// This field is selectable only in the ad group scope, which requires an
	// equality filter on `campaign` and `ad_group`.
	AdGroup       *string `protobuf:"bytes,35,opt,name=ad_group,json=adGroup,proto3,oneof" json:"ad_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShoppingProduct) Reset() {
	*x = ShoppingProduct{}
	mi := &file_resources_shopping_product_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShoppingProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShoppingProduct) ProtoMessage() {}

func (x *ShoppingProduct) ProtoReflect() protoreflect.Message {
	mi := &file_resources_shopping_product_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShoppingProduct.ProtoReflect.Descriptor instead.
func (*ShoppingProduct) Descriptor() ([]byte, []int) {
	return file_resources_shopping_product_proto_rawDescGZIP(), []int{0}
}

func (x *ShoppingProduct) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ShoppingProduct) GetMerchantCenterId() int64 {
	if x != nil {
		return x.MerchantCenterId
	}
	return 0
}

func (x *ShoppingProduct) GetChannel() enums.ProductChannelEnum_ProductChannel {
	if x != nil {
		return x.Channel
	}
	return enums.ProductChannelEnum_ProductChannel(0)
}

func (x *ShoppingProduct) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *ShoppingProduct) GetFeedLabel() string {
	if x != nil {
		return x.FeedLabel
	}
	return ""
}

func (x *ShoppingProduct) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *ShoppingProduct) GetMultiClientAccountId() int64 {
	if x != nil && x.MultiClientAccountId != nil {
		return *x.MultiClientAccountId
	}
	return 0
}

func (x *ShoppingProduct) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ShoppingProduct) GetBrand() string {
	if x != nil && x.Brand != nil {
		return *x.Brand
	}
	return ""
}

func (x *ShoppingProduct) GetPriceMicros() int64 {
	if x != nil && x.PriceMicros != nil {
		return *x.PriceMicros
	}
	return 0
}

func (x *ShoppingProduct) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *ShoppingProduct) GetChannelExclusivity() enums.ProductChannelExclusivityEnum_ProductChannelExclusivity {
	if x != nil && x.ChannelExclusivity != nil {
		return *x.ChannelExclusivity
	}
	return enums.ProductChannelExclusivityEnum_ProductChannelExclusivity(0)
}

func (x *ShoppingProduct) GetCondition() enums.ProductConditionEnum_ProductCondition {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return enums.ProductConditionEnum_ProductCondition(0)
}

func (x *ShoppingProduct) GetAvailability() enums.ProductAvailabilityEnum_ProductAvailability {
	if x != nil && x.Availability != nil {
		return *x.Availability
	}
	return enums.ProductAvailabilityEnum_ProductAvailability(0)
}

func (x *ShoppingProduct) GetTargetCountries() []string {
	if x != nil {
		return x.TargetCountries
	}
	return nil
}

func (x *ShoppingProduct) GetCustomAttribute0() string {
	if x != nil && x.CustomAttribute0 != nil {
		return *x.CustomAttribute0
	}
	return ""
}

func (x *ShoppingProduct) GetCustomAttribute1() string {
	if x != nil && x.CustomAttribute1 != nil {
		return *x.CustomAttribute1
	}
	return ""
}

func (x *ShoppingProduct) GetCustomAttribute2() string {
	if x != nil && x.CustomAttribute2 != nil {
		return *x.CustomAttribute2
	}
	return ""
}

func (x *ShoppingProduct) GetCustomAttribute3() string {
	if x != nil && x.CustomAttribute3 != nil {
		return *x.CustomAttribute3
	}
	return ""
}

func (x *ShoppingProduct) GetCustomAttribute4() string {
	if x != nil && x.CustomAttribute4 != nil {
		return *x.CustomAttribute4
	}
	return ""
}

func (x *ShoppingProduct) GetCategoryLevel1() string {
	if x != nil && x.CategoryLevel1 != nil {
		return *x.CategoryLevel1
	}
	return ""
}

func (x *ShoppingProduct) GetCategoryLevel2() string {
	if x != nil && x.CategoryLevel2 != nil {
		return *x.CategoryLevel2
	}
	return ""
}

func (x *ShoppingProduct) GetCategoryLevel3() string {
	if x != nil && x.CategoryLevel3 != nil {
		return *x.CategoryLevel3
	}
	return ""
}

func (x *ShoppingProduct) GetCategoryLevel4() string {
	if x != nil && x.CategoryLevel4 != nil {
		return *x.CategoryLevel4
	}
	return ""
}

func (x *ShoppingProduct) GetCategoryLevel5() string {
	if x != nil && x.CategoryLevel5 != nil {
		return *x.CategoryLevel5
	}
	return ""
}

func (x *ShoppingProduct) GetProductTypeLevel1() string {
	if x != nil && x.ProductTypeLevel1 != nil {
		return *x.ProductTypeLevel1
	}
	return ""
}

func (x *ShoppingProduct) GetProductTypeLevel2() string {
	if x != nil && x.ProductTypeLevel2 != nil {
		return *x.ProductTypeLevel2
	}
	return ""
}

func (x *ShoppingProduct) GetProductTypeLevel3() string {
	if x != nil && x.ProductTypeLevel3 != nil {
		return *x.ProductTypeLevel3
	}
	return ""
}

func (x *ShoppingProduct) GetProductTypeLevel4() string {
	if x != nil && x.ProductTypeLevel4 != nil {
		return *x.ProductTypeLevel4
	}
	return ""
}

func (x *ShoppingProduct) GetProductTypeLevel5() string {
	if x != nil && x.ProductTypeLevel5 != nil {
		return *x.ProductTypeLevel5
	}
	return ""
}

func (x *ShoppingProduct) GetEffectiveMaxCpcMicros() int64 {
	if x != nil && x.EffectiveMaxCpcMicros != nil {
		return *x.EffectiveMaxCpcMicros
	}
	return 0
}

func (x *ShoppingProduct) GetStatus() enums.ProductStatusEnum_ProductStatus {
	if x != nil {
		return x.Status
	}
	return enums.ProductStatusEnum_ProductStatus(0)
}

func (x *ShoppingProduct) GetIssues() []*ShoppingProduct_ProductIssue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ShoppingProduct) GetCampaign() string {
	if x != nil && x.Campaign != nil {
		return *x.Campaign
	}
	return ""
}

func (x *ShoppingProduct) GetAdGroup() string {
	if x != nil && x.AdGroup != nil {
		return *x.AdGroup
	}
	return ""
}

// An issue affecting whether a product can show in ads.
type ShoppingProduct_ProductIssue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The error code that identifies the issue.
	ErrorCode string `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Output only. The severity of the issue in Google Ads.
	AdsSeverity enums.ProductIssueSeverityEnum_ProductIssueSeverity `protobuf:"varint,2,opt,name=ads_severity,json=adsSeverity,proto3,enum=google.ads.googleads.v19.enums.ProductIssueSeverityEnum_ProductIssueSeverity" json:"ads_severity,omitempty"`
	// Output only. The name of the product's attribute, if any, that triggered
	// the issue.
	AttributeName *string `protobuf:"bytes,3,opt,name=attribute_name,json=attributeName,proto3,oneof" json:"attribute_name,omitempty"`
	// Output only. The short description of the issue in English.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The detailed description of the issue in English.
	Detail string `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	// Output only. The URL of the Help Center article for the issue.
	Documentation string `protobuf:"bytes,6,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// Output only. List of upper-case two-letter ISO 3166-1 codes of the
	// regions affected by the issue. If empty, all regions are affected.
	AffectedRegions []string `protobuf:"bytes,7,rep,name=affected_regions,json=affectedRegions,proto3" json:"affected_regions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShoppingProduct_ProductIssue) Reset() {
	*x = ShoppingProduct_ProductIssue{}
	mi := &file_resources_shopping_product_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShoppingProduct_ProductIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShoppingProduct_ProductIssue) ProtoMessage() {}

func (x *ShoppingProduct_ProductIssue) ProtoReflect() protoreflect.Message {
	mi := &file_resources_shopping_product_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShoppingProduct_ProductIssue.ProtoReflect.Descriptor instead.
func (*ShoppingProduct_ProductIssue) Descriptor() ([]byte, []int) {
	return file_resources_shopping_product_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ShoppingProduct_ProductIssue) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ShoppingProduct_ProductIssue) GetAdsSeverity() enums.ProductIssueSeverityEnum_ProductIssueSeverity {
	if x != nil {
		return x.AdsSeverity
	}
	return enums.ProductIssueSeverityEnum_ProductIssueSeverity(0)
}

func (x *ShoppingProduct_ProductIssue) GetAttributeName() string {
	if x != nil && x.AttributeName != nil {
		return *x.AttributeName
	}
	return ""
}

func (x *ShoppingProduct_ProductIssue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShoppingProduct_ProductIssue) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ShoppingProduct_ProductIssue) GetDocumentation() string {
	if x != nil {
		return x.Documentation
	}
	return ""
}

func (x *ShoppingProduct_ProductIssue) GetAffectedRegions() []string {
	if x != nil {
		return x.AffectedRegions
	}
	return nil
}

var File_resources_shopping_product_proto protoreflect.FileDescriptor

var file_resources_shopping_product_proto_rawDesc = string([]byte{
	0x0a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x1c, 0x0a, 0x0f, 0x53, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x66, 0x65, 0x65,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x05, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x04,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x05, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x06, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x07, 0x52,
	0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x08, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x30, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x0a,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x33, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x0b, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x33, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x0c, 0x52, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41,
	0x03, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x0e,
	0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41,
	0x03, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x0f, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x10,
	0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41,
	0x03, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x11, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x12, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x13, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x14, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x15, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x16, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x18, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x70, 0x63, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x17, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x78, 0x43, 0x70, 0x63, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x48, 0x18, 0x52, 0x08, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x08, 0x61, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x03,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x19, 0x52, 0x07, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x1a, 0x8c, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x61, 0x64, 0x73, 0x5f,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x73, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2f, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x3a, 0xc1, 0x01, 0xea, 0x41, 0xbd, 0x01, 0x0a, 0x28, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x6e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x7e, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x7e, 0x7b, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x7e, 0x7b, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7d, 0x7e, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x7d, 0x2a, 0x10, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x32, 0x0f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x30, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x31, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x32, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x33, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x34, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x35, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x32, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x34, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x63,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x86, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x14, 0x53, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56,
	0x31, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xca, 0x02, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x39, 0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a,
	0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x39, 0x3a,
	0x3a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_resources_shopping_product_proto_rawDescOnce sync.Once
	file_resources_shopping_product_proto_rawDescData []byte
)

func file_resources_shopping_product_proto_rawDescGZIP() []byte {
	file_resources_shopping_product_proto_rawDescOnce.Do(func() {
		file_resources_shopping_product_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_resources_shopping_product_proto_rawDesc), len(file_resources_shopping_product_proto_rawDesc)))
	})
	return file_resources_shopping_product_proto_rawDescData
}

var file_resources_shopping_product_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_resources_shopping_product_proto_goTypes = []any{
	(*ShoppingProduct)(nil),                                            // 0: google.ads.googleads.v19.resources.ShoppingProduct
	(*ShoppingProduct_ProductIssue)(nil),                               // 1: google.ads.googleads.v19.resources.ShoppingProduct.ProductIssue
	(enums.ProductChannelEnum_ProductChannel)(0),                       // 2: google.ads.googleads.v19.enums.ProductChannelEnum.ProductChannel
	(enums.ProductChannelExclusivityEnum_ProductChannelExclusivity)(0), // 3: google.ads.googleads.v19.enums.ProductChannelExclusivityEnum.ProductChannelExclusivity
	(enums.ProductConditionEnum_ProductCondition)(0),                   // 4: google.ads.googleads.v19.enums.ProductConditionEnum.ProductCondition
	(enums.ProductAvailabilityEnum_ProductAvailability)(0),             // 5: google.ads.googleads.v19.enums.ProductAvailabilityEnum.ProductAvailability
	(enums.ProductStatusEnum_ProductStatus)(0),                         // 6: google.ads.googleads.v19.enums.ProductStatusEnum.ProductStatus
	(enums.ProductIssueSeverityEnum_ProductIssueSeverity)(0),           // 7: google.ads.googleads.v19.enums.ProductIssueSeverityEnum.ProductIssueSeverity
}
var file_resources_shopping_product_proto_depIdxs = []int32{
	2, // 0: google.ads.googleads.v19.resources.ShoppingProduct.channel:type_name -> google.ads.googleads.v19.enums.ProductChannelEnum.ProductChannel
	3, // 1: google.ads.googleads.v19.resources.ShoppingProduct.channel_exclusivity:type_name -> google.ads.googleads.v19.enums.ProductChannelExclusivityEnum.ProductChannelExclusivity
	4, // 2: google.ads.googleads.v19.resources.ShoppingProduct.condition:type_name -> google.ads.googleads.v19.enums.ProductConditionEnum.ProductCondition
	5, // 3: google.ads.googleads.v19.resources.ShoppingProduct.availability:type_name -> google.ads.googleads.v19.enums.ProductAvailabilityEnum.ProductAvailability
	6, // 4: google.ads.googleads.v19.resources.ShoppingProduct.status:type_name -> google.ads.googleads.v19.enums.ProductStatusEnum.ProductStatus
	1, // 5: google.ads.googleads.v19.resources.ShoppingProduct.issues:type_name -> google.ads.googleads.v19.resources.ShoppingProduct.ProductIssue
	7, // 6: google.ads.googleads.v19.resources.ShoppingProduct.ProductIssue.ads_severity:type_name -> google.ads.googleads.v19.enums.ProductIssueSeverityEnum.ProductIssueSeverity
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_resources_shopping_product_proto_init() }
func file_resources_shopping_product_proto_init() {
	if File_resources_shopping_product_proto != nil {
		return
	}
	file_resources_shopping_product_proto_msgTypes[0].OneofWrappers = []any{}
	file_resources_shopping_product_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_resources_shopping_product_proto_rawDesc), len(file_resources_shopping_product_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_shopping_product_proto_goTypes,
		DependencyIndexes: file_resources_shopping_product_proto_depIdxs,
		MessageInfos:      file_resources_shopping_product_proto_msgTypes,
	}.Build()
	File_resources_shopping_product_proto = out.File
	file_resources_shopping_product_proto_goTypes = nil
	file_resources_shopping_product_proto_depIdxs = nil
}
