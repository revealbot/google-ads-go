// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: google/ads/googleads/v19/resources/asset_group.proto

package resources

import (
	enums "github.com/revealbot/google-ads-go/enums"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An asset group.
// AssetGroupAsset is used to link an asset to the asset group.
// AssetGroupSignal is used to associate a signal to an asset group.
type AssetGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Immutable. The resource name of the asset group.
	// Asset group resource names have the form:
	//
	// `customers/{customer_id}/assetGroups/{asset_group_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Output only. The ID of the asset group.
	Id int64 `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	// Immutable. The campaign with which this asset group is associated.
	// The asset which is linked to the asset group.
	Campaign string `protobuf:"bytes,2,opt,name=campaign,proto3" json:"campaign,omitempty"`
	// Required. Name of the asset group. Required. It must have a minimum length
	// of 1 and maximum length of 128. It must be unique under a campaign.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A list of final URLs after all cross domain redirects. In performance max,
	// by default, the urls are eligible for expansion unless opted out.
	FinalUrls []string `protobuf:"bytes,4,rep,name=final_urls,json=finalUrls,proto3" json:"final_urls,omitempty"`
	// A list of final mobile URLs after all cross domain redirects. In
	// performance max, by default, the urls are eligible for expansion
	// unless opted out.
	FinalMobileUrls []string `protobuf:"bytes,5,rep,name=final_mobile_urls,json=finalMobileUrls,proto3" json:"final_mobile_urls,omitempty"`
	// The status of the asset group.
	Status enums.AssetGroupStatusEnum_AssetGroupStatus `protobuf:"varint,6,opt,name=status,proto3,enum=google.ads.googleads.v19.enums.AssetGroupStatusEnum_AssetGroupStatus" json:"status,omitempty"`
	// Output only. The primary status of the asset group. Provides insights into
	// why an asset group is not serving or not serving optimally.
	PrimaryStatus enums.AssetGroupPrimaryStatusEnum_AssetGroupPrimaryStatus `protobuf:"varint,11,opt,name=primary_status,json=primaryStatus,proto3,enum=google.ads.googleads.v19.enums.AssetGroupPrimaryStatusEnum_AssetGroupPrimaryStatus" json:"primary_status,omitempty"`
	// Output only. Provides reasons into why an asset group is not serving or not
	// serving optimally. It will be empty when the asset group is serving without
	// issues.
	PrimaryStatusReasons []enums.AssetGroupPrimaryStatusReasonEnum_AssetGroupPrimaryStatusReason `protobuf:"varint,12,rep,packed,name=primary_status_reasons,json=primaryStatusReasons,proto3,enum=google.ads.googleads.v19.enums.AssetGroupPrimaryStatusReasonEnum_AssetGroupPrimaryStatusReason" json:"primary_status_reasons,omitempty"`
	// First part of text that may appear appended to the url displayed in
	// the ad.
	Path1 string `protobuf:"bytes,7,opt,name=path1,proto3" json:"path1,omitempty"`
	// Second part of text that may appear appended to the url displayed in
	// the ad. This field can only be set when path1 is set.
	Path2 string `protobuf:"bytes,8,opt,name=path2,proto3" json:"path2,omitempty"`
	// Output only. Overall ad strength of this asset group.
	AdStrength enums.AdStrengthEnum_AdStrength `protobuf:"varint,10,opt,name=ad_strength,json=adStrength,proto3,enum=google.ads.googleads.v19.enums.AdStrengthEnum_AdStrength" json:"ad_strength,omitempty"`
	// Output only. The asset coverage of this asset group.
	AssetCoverage *AssetCoverage `protobuf:"bytes,13,opt,name=asset_coverage,json=assetCoverage,proto3" json:"asset_coverage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroup) Reset() {
	*x = AssetGroup{}
	mi := &file_resources_asset_group_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroup) ProtoMessage() {}

func (x *AssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_resources_asset_group_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroup.ProtoReflect.Descriptor instead.
func (*AssetGroup) Descriptor() ([]byte, []int) {
	return file_resources_asset_group_proto_rawDescGZIP(), []int{0}
}

func (x *AssetGroup) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *AssetGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssetGroup) GetCampaign() string {
	if x != nil {
		return x.Campaign
	}
	return ""
}

func (x *AssetGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetGroup) GetFinalUrls() []string {
	if x != nil {
		return x.FinalUrls
	}
	return nil
}

func (x *AssetGroup) GetFinalMobileUrls() []string {
	if x != nil {
		return x.FinalMobileUrls
	}
	return nil
}

func (x *AssetGroup) GetStatus() enums.AssetGroupStatusEnum_AssetGroupStatus {
	if x != nil {
		return x.Status
	}
	return enums.AssetGroupStatusEnum_AssetGroupStatus(0)
}

func (x *AssetGroup) GetPrimaryStatus() enums.AssetGroupPrimaryStatusEnum_AssetGroupPrimaryStatus {
	if x != nil {
		return x.PrimaryStatus
	}
	return enums.AssetGroupPrimaryStatusEnum_AssetGroupPrimaryStatus(0)
}

func (x *AssetGroup) GetPrimaryStatusReasons() []enums.AssetGroupPrimaryStatusReasonEnum_AssetGroupPrimaryStatusReason {
	if x != nil {
		return x.PrimaryStatusReasons
	}
	return nil
}

func (x *AssetGroup) GetPath1() string {
	if x != nil {
		return x.Path1
	}
	return ""
}

func (x *AssetGroup) GetPath2() string {
	if x != nil {
		return x.Path2
	}
	return ""
}

func (x *AssetGroup) GetAdStrength() enums.AdStrengthEnum_AdStrength {
	if x != nil {
		return x.AdStrength
	}
	return enums.AdStrengthEnum_AdStrength(0)
}

func (x *AssetGroup) GetAssetCoverage() *AssetCoverage {
	if x != nil {
		return x.AssetCoverage
	}
	return nil
}

// Information about the asset coverage of an asset group.
type AssetCoverage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. A list of action items to improve the ad strength of an asset
	// group.
	AdStrengthActionItems []*AdStrengthActionItem `protobuf:"bytes,1,rep,name=ad_strength_action_items,json=adStrengthActionItems,proto3" json:"ad_strength_action_items,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AssetCoverage) Reset() {
	*x = AssetCoverage{}
	mi := &file_resources_asset_group_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetCoverage) ProtoMessage() {}

func (x *AssetCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_resources_asset_group_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetCoverage.ProtoReflect.Descriptor instead.
func (*AssetCoverage) Descriptor() ([]byte, []int) {
	return file_resources_asset_group_proto_rawDescGZIP(), []int{1}
}

func (x *AssetCoverage) GetAdStrengthActionItems() []*AdStrengthActionItem {
	if x != nil {
		return x.AdStrengthActionItems
	}
	return nil
}

// An action item to improve the ad strength of an asset group.
type AdStrengthActionItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The action item type.
	ActionItemType enums.AdStrengthActionItemTypeEnum_AdStrengthActionItemType `protobuf:"varint,1,opt,name=action_item_type,json=actionItemType,proto3,enum=google.ads.googleads.v19.enums.AdStrengthActionItemTypeEnum_AdStrengthActionItemType" json:"action_item_type,omitempty"`
	// The details of this action item.
	//
	// Types that are valid to be assigned to ActionDetails:
	//
	//	*AdStrengthActionItem_AddAssetDetails_
	ActionDetails isAdStrengthActionItem_ActionDetails `protobuf_oneof:"action_details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdStrengthActionItem) Reset() {
	*x = AdStrengthActionItem{}
	mi := &file_resources_asset_group_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdStrengthActionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdStrengthActionItem) ProtoMessage() {}

func (x *AdStrengthActionItem) ProtoReflect() protoreflect.Message {
	mi := &file_resources_asset_group_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdStrengthActionItem.ProtoReflect.Descriptor instead.
func (*AdStrengthActionItem) Descriptor() ([]byte, []int) {
	return file_resources_asset_group_proto_rawDescGZIP(), []int{2}
}

func (x *AdStrengthActionItem) GetActionItemType() enums.AdStrengthActionItemTypeEnum_AdStrengthActionItemType {
	if x != nil {
		return x.ActionItemType
	}
	return enums.AdStrengthActionItemTypeEnum_AdStrengthActionItemType(0)
}

func (x *AdStrengthActionItem) GetActionDetails() isAdStrengthActionItem_ActionDetails {
	if x != nil {
		return x.ActionDetails
	}
	return nil
}

func (x *AdStrengthActionItem) GetAddAssetDetails() *AdStrengthActionItem_AddAssetDetails {
	if x != nil {
		if x, ok := x.ActionDetails.(*AdStrengthActionItem_AddAssetDetails_); ok {
			return x.AddAssetDetails
		}
	}
	return nil
}

type isAdStrengthActionItem_ActionDetails interface {
	isAdStrengthActionItem_ActionDetails()
}

type AdStrengthActionItem_AddAssetDetails_ struct {
	// Output only. The action item details for action item type ADD_ASSET.
	AddAssetDetails *AdStrengthActionItem_AddAssetDetails `protobuf:"bytes,2,opt,name=add_asset_details,json=addAssetDetails,proto3,oneof"`
}

func (*AdStrengthActionItem_AddAssetDetails_) isAdStrengthActionItem_ActionDetails() {}

// The details of the asset to add.
type AdStrengthActionItem_AddAssetDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The asset field type of the asset(s) to add.
	AssetFieldType enums.AssetFieldTypeEnum_AssetFieldType `protobuf:"varint,1,opt,name=asset_field_type,json=assetFieldType,proto3,enum=google.ads.googleads.v19.enums.AssetFieldTypeEnum_AssetFieldType" json:"asset_field_type,omitempty"`
	// Output only. The number of assets to add.
	AssetCount *int32 `protobuf:"varint,2,opt,name=asset_count,json=assetCount,proto3,oneof" json:"asset_count,omitempty"`
	// Output only. For video field types, the required aspect ratio of the
	// video. When unset and asset_field_type is YOUTUBE_VIDEO, the system
	// recommends the advertiser upload any YouTube video, regardless of aspect
	// ratio.
	VideoAspectRatioRequirement *enums.AssetCoverageVideoAspectRatioRequirementEnum_AssetCoverageVideoAspectRatioRequirement `protobuf:"varint,3,opt,name=video_aspect_ratio_requirement,json=videoAspectRatioRequirement,proto3,enum=google.ads.googleads.v19.enums.AssetCoverageVideoAspectRatioRequirementEnum_AssetCoverageVideoAspectRatioRequirement,oneof" json:"video_aspect_ratio_requirement,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *AdStrengthActionItem_AddAssetDetails) Reset() {
	*x = AdStrengthActionItem_AddAssetDetails{}
	mi := &file_resources_asset_group_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdStrengthActionItem_AddAssetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdStrengthActionItem_AddAssetDetails) ProtoMessage() {}

func (x *AdStrengthActionItem_AddAssetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_resources_asset_group_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdStrengthActionItem_AddAssetDetails.ProtoReflect.Descriptor instead.
func (*AdStrengthActionItem_AddAssetDetails) Descriptor() ([]byte, []int) {
	return file_resources_asset_group_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AdStrengthActionItem_AddAssetDetails) GetAssetFieldType() enums.AssetFieldTypeEnum_AssetFieldType {
	if x != nil {
		return x.AssetFieldType
	}
	return enums.AssetFieldTypeEnum_AssetFieldType(0)
}

func (x *AdStrengthActionItem_AddAssetDetails) GetAssetCount() int32 {
	if x != nil && x.AssetCount != nil {
		return *x.AssetCount
	}
	return 0
}

func (x *AdStrengthActionItem_AddAssetDetails) GetVideoAspectRatioRequirement() enums.AssetCoverageVideoAspectRatioRequirementEnum_AssetCoverageVideoAspectRatioRequirement {
	if x != nil && x.VideoAspectRatioRequirement != nil {
		return *x.VideoAspectRatioRequirement
	}
	return enums.AssetCoverageVideoAspectRatioRequirementEnum_AssetCoverageVideoAspectRatioRequirement(0)
}

var File_resources_asset_group_proto protoreflect.FileDescriptor

var file_resources_asset_group_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x52, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x08, 0x0a, 0x0a, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xe0, 0x41, 0x05, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x31, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x32, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x3a, 0x77, 0xea, 0x41, 0x74, 0x0a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x7d, 0x2a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x87, 0x01, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a,
	0x18, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd7, 0x05, 0x0a, 0x14, 0x41, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x84,
	0x01, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0xa8, 0x03, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0xc4, 0x01, 0x0a, 0x1e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x75, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x1b, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x81, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x39,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x0f, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x39, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41,
	0xaa, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x31, 0x39, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0xca, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41,
	0x64, 0x73, 0x5c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x39,
	0x5c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x39, 0x3a, 0x3a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_resources_asset_group_proto_rawDescOnce sync.Once
	file_resources_asset_group_proto_rawDescData []byte
)

func file_resources_asset_group_proto_rawDescGZIP() []byte {
	file_resources_asset_group_proto_rawDescOnce.Do(func() {
		file_resources_asset_group_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_resources_asset_group_proto_rawDesc), len(file_resources_asset_group_proto_rawDesc)))
	})
	return file_resources_asset_group_proto_rawDescData
}

var file_resources_asset_group_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_resources_asset_group_proto_goTypes = []any{
	(*AssetGroup)(nil),                                                                               // 0: google.ads.googleads.v19.resources.AssetGroup
	(*AssetCoverage)(nil),                                                                            // 1: google.ads.googleads.v19.resources.AssetCoverage
	(*AdStrengthActionItem)(nil),                                                                     // 2: google.ads.googleads.v19.resources.AdStrengthActionItem
	(*AdStrengthActionItem_AddAssetDetails)(nil),                                                     // 3: google.ads.googleads.v19.resources.AdStrengthActionItem.AddAssetDetails
	(enums.AssetGroupStatusEnum_AssetGroupStatus)(0),                                                 // 4: google.ads.googleads.v19.enums.AssetGroupStatusEnum.AssetGroupStatus
	(enums.AssetGroupPrimaryStatusEnum_AssetGroupPrimaryStatus)(0),                                   // 5: google.ads.googleads.v19.enums.AssetGroupPrimaryStatusEnum.AssetGroupPrimaryStatus
	(enums.AssetGroupPrimaryStatusReasonEnum_AssetGroupPrimaryStatusReason)(0),                       // 6: google.ads.googleads.v19.enums.AssetGroupPrimaryStatusReasonEnum.AssetGroupPrimaryStatusReason
	(enums.AdStrengthEnum_AdStrength)(0),                                                             // 7: google.ads.googleads.v19.enums.AdStrengthEnum.AdStrength
	(enums.AdStrengthActionItemTypeEnum_AdStrengthActionItemType)(0),                                 // 8: google.ads.googleads.v19.enums.AdStrengthActionItemTypeEnum.AdStrengthActionItemType
	(enums.AssetFieldTypeEnum_AssetFieldType)(0),                                                     // 9: google.ads.googleads.v19.enums.AssetFieldTypeEnum.AssetFieldType
	(enums.AssetCoverageVideoAspectRatioRequirementEnum_AssetCoverageVideoAspectRatioRequirement)(0), // 10: google.ads.googleads.v19.enums.AssetCoverageVideoAspectRatioRequirementEnum.AssetCoverageVideoAspectRatioRequirement
}
var file_resources_asset_group_proto_depIdxs = []int32{
	4,  // 0: google.ads.googleads.v19.resources.AssetGroup.status:type_name -> google.ads.googleads.v19.enums.AssetGroupStatusEnum.AssetGroupStatus
	5,  // 1: google.ads.googleads.v19.resources.AssetGroup.primary_status:type_name -> google.ads.googleads.v19.enums.AssetGroupPrimaryStatusEnum.AssetGroupPrimaryStatus
	6,  // 2: google.ads.googleads.v19.resources.AssetGroup.primary_status_reasons:type_name -> google.ads.googleads.v19.enums.AssetGroupPrimaryStatusReasonEnum.AssetGroupPrimaryStatusReason
	7,  // 3: google.ads.googleads.v19.resources.AssetGroup.ad_strength:type_name -> google.ads.googleads.v19.enums.AdStrengthEnum.AdStrength
	1,  // 4: google.ads.googleads.v19.resources.AssetGroup.asset_coverage:type_name -> google.ads.googleads.v19.resources.AssetCoverage
	2,  // 5: google.ads.googleads.v19.resources.AssetCoverage.ad_strength_action_items:type_name -> google.ads.googleads.v19.resources.AdStrengthActionItem
	8,  // 6: google.ads.googleads.v19.resources.AdStrengthActionItem.action_item_type:type_name -> google.ads.googleads.v19.enums.AdStrengthActionItemTypeEnum.AdStrengthActionItemType
	3,  // 7: google.ads.googleads.v19.resources.AdStrengthActionItem.add_asset_details:type_name -> google.ads.googleads.v19.resources.AdStrengthActionItem.AddAssetDetails
	9,  // 8: google.ads.googleads.v19.resources.AdStrengthActionItem.AddAssetDetails.asset_field_type:type_name -> google.ads.googleads.v19.enums.AssetFieldTypeEnum.AssetFieldType
	10, // 9: google.ads.googleads.v19.resources.AdStrengthActionItem.AddAssetDetails.video_aspect_ratio_requirement:type_name -> google.ads.googleads.v19.enums.AssetCoverageVideoAspectRatioRequirementEnum.AssetCoverageVideoAspectRatioRequirement
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_resources_asset_group_proto_init() }
func file_resources_asset_group_proto_init() {
	if File_resources_asset_group_proto != nil {
		return
	}
	file_resources_asset_group_proto_msgTypes[2].OneofWrappers = []any{
		(*AdStrengthActionItem_AddAssetDetails_)(nil),
	}
	file_resources_asset_group_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_resources_asset_group_proto_rawDesc), len(file_resources_asset_group_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_asset_group_proto_goTypes,
		DependencyIndexes: file_resources_asset_group_proto_depIdxs,
		MessageInfos:      file_resources_asset_group_proto_msgTypes,
	}.Build()
	File_resources_asset_group_proto = out.File
	file_resources_asset_group_proto_goTypes = nil
	file_resources_asset_group_proto_depIdxs = nil
}
